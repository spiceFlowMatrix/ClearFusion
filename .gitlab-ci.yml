stages:
    - build_apps
    - integration
    - publish_docker
    - deploy

variables:
    GKE_SERVICE_ACCOUNT: ${GKE_SERVICE_ACCOUNT}
    CF_CLEAN_URL: cleantestedg.cha-net.org
    CF_REVIEW_URL: review.cha-net.org
    CF_CHAPROD_URL: manage.cha-net.org
    CF_SMOPROD_URL: manage.sabacent.org
    CF_APP_IMAGE: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHORT_SHA}
    DOCKER_TLS_CERTDIR: "" # required since we use dind with no tls
    DOCKER_HOST: tcp://localhost:2375/ # required since we use dind

build_newui:
    stage: build_apps
    image: node:latest
    cache:
        key: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
        paths:
            - HumanitarianAssistance.WebApi/NewUI/node_modules/
    before_script:
        - apt-get update && apt-get install -y unzip fontconfig locales gconf-service libasound2 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 ca-certificates fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils wget
        - cd HumanitarianAssistance.WebApi/NewUI/
    script:
        - npm install --quiet
        
      
    after_script:
        - find HumanitarianAssistance.WebApi/NewUI/dist/
    artifacts:
        paths:
            - HumanitarianAssistance.WebApi/NewUI/dist/
        expire_in: 1 week
    retry: 2

build_oldui:
    stage: build_apps
    image: node:latest
    cache:
        key: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
        paths:
            - HumanitarianAssistance.WebApi/OldUI/node_modules/
    before_script:
        - apt-get update && apt-get install -y unzip fontconfig locales gconf-service libasound2 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 ca-certificates fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils wget
        - cd HumanitarianAssistance.WebApi/OldUI/
    script:
         - npm install --quiet
         - npm run build --prod
    after_script:
        - find HumanitarianAssistance.WebApi/OldUI/dist/
    artifacts:
        paths:
            - HumanitarianAssistance.WebApi/OldUI/dist/
        expire_in: 1 week
    retry: 2

build_backend:
    image: mcr.microsoft.com/dotnet/core/aspnet:2.2
    stage: integration
    variables:
        OBJECTS_DIRECTORY: obj/
        BINARIES_DIRECTORY: bin/
        RELEASE_OBJECTS_DIRECTORY: release/
        NUGET_PACKAGES_DIRECTORY: .nuget/
        SOURCE_CODE_PATH: HumanitarianAssistance.WebApi/
    cache:
        key: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
        paths:
            - ${SOURCE_CODE_PATH}${OBJECTS_DIRECTORY}project.assets.json
            - ${SOURCE_CODE_PATH}${OBJECTS_DIRECTORY}*.csproj.nuget.*
            - ${NUGET_PACKAGES_DIRECTORY}
    before_script:
        - dotnet restore --packages ${NUGET_PACKAGES_DIRECTORY}
    script:
        - dotnet publish -c Release -o ${RELEASE_OBJECTS_DIRECTORY} --no-restore
        - cp -r ${SOURCE_CODE_PATH}NewUI/dist/ ${SOURCE_CODE_PATH}${RELEASE_OBJECTS_DIRECTORY}NewUI
        - cp -r ${SOURCE_CODE_PATH}OldUI/dist/ ${SOURCE_CODE_PATH}${RELEASE_OBJECTS_DIRECTORY}OldUI
    after_script:
        - find ${SOURCE_CODE_PATH}${RELEASE_OBJECTS_DIRECTORY}
    artifacts:
        paths:
            - ${SOURCE_CODE_PATH}${RELEASE_OBJECTS_DIRECTORY}
        expire_in: 1 week
    retry: 2

publish_container:
    image: docker:git
    services:
        - docker:18.09.7-dind
    stage: publish_docker
    script:
        - docker login -u gitlab-ci-token -p ${CI_BUILD_TOKEN} ${CI_REGISTRY}
        - docker pull ${CF_APP_IMAGE} || true
        - docker build --cache-from ${CF_APP_IMAGE} -t ${CF_APP_IMAGE} -f ./Dockerfile .
        - docker push ${CF_APP_IMAGE}
    retry: 2
    only:
        refs:
            - cleanarch
            - review
            - master

deploy_cleanarch:
    image: devth/helm
    stage: deploy
    environment:
        name: cleanarch
        url: https://${CF_CLEAN_URL}
    variables:
        HOSTING_ENV: Production
    script:
        - init_gke
        - helm upgrade
          --install
          --namespace ${KUBE_NAMESPACE}
          --set web.image="${CF_APP_IMAGE}"
          --set web.host="${CF_CLEAN_URL}"
          --set app.env="${HOSTING_ENV}"
          --set deployment.namespace="${KUBE_NAMESPACE}"
          --set ci.project.path="${CI_PROJECT_PATH_SLUG}"
          --set ci.project.environment="${CI_ENVIRONMENT_SLUG}"
          --set app.secret.appdbconnectionstring="${LINUX_DBCONNECTION_STRING}"
          --set app.secret.postgresuser="${POSTGRES_DB_USER}"
          --set app.secret.postgrespassword="${POSTGRES_DB_PASSWORD}"
          --set app.secret.appserviceaccount="${APPLICATION_GCP_SERVICEACCOUNT}"
          --set app.secret.googlebucketname="${APP_GOOGLE_BUCKET_NAME}"
          --wait
          clearfusion
          ./k8s-chart
    only:
        refs:
            - cleanarch


deploy_review:
    stage: deploy
    image: devth/helm
    environment:
        name: review
        url: https://${CF_REVIEW_URL}
    variables:
        HOSTING_ENV: Production
    script:
        - init_gke
        - helm upgrade
          --install
          --namespace ${KUBE_NAMESPACE}
          --set web.image="${CF_APP_IMAGE}"
          --set web.host="${CF_REVIEW_URL}"
          --set app.env="${HOSTING_ENV}"
          --set deployment.namespace="${KUBE_NAMESPACE}"
          --set ci.project.path="${CI_PROJECT_PATH_SLUG}"
          --set ci.project.environment="${CI_ENVIRONMENT_SLUG}"
          --set app.secret.appdbconnectionstring="${LINUX_DBCONNECTION_STRING}"
          --set app.secret.postgresuser="${POSTGRES_DB_USER}"
          --set app.secret.postgrespassword="${POSTGRES_DB_PASSWORD}"
          --set app.secret.appserviceaccount="${APPLICATION_GCP_SERVICEACCOUNT}"
          --set app.secret.googlebucketname="${APP_GOOGLE_BUCKET_NAME}"
          --wait
          clearfusion
          ./k8s-chart
    only:
        refs:
            - review


deploy_chaprod:
    stage: deploy
    image: devth/helm
    environment:
        name: chaprod
        url: https://${CF_CHAPROD_URL}
    variables:
        HOSTING_ENV: Production
    script:
        - init_gke
        - helm upgrade
          --install
          --namespace ${KUBE_NAMESPACE}
          --set web.image="${CF_APP_IMAGE}"
          --set web.host="${CF_CHAPROD_URL}"
          --set app.env="${HOSTING_ENV}"
          --set deployment.namespace="${KUBE_NAMESPACE}"
          --set ci.project.path="${CI_PROJECT_PATH_SLUG}"
          --set ci.project.environment="${CI_ENVIRONMENT_SLUG}"
          --set app.secret.appdbconnectionstring="${LINUX_DBCONNECTION_STRING}"
          --set app.secret.postgresuser="${POSTGRES_DB_USER}"
          --set app.secret.postgrespassword="${POSTGRES_DB_PASSWORD}"
          --set app.secret.appserviceaccount="${APPLICATION_GCP_SERVICEACCOUNT}"
          --set app.secret.googlebucketname="${APP_GOOGLE_BUCKET_NAME}"
          --wait
          clearfusion
          ./k8s-chart
    only:
        refs:
            - master

deploy_smoprod:
    stage: deploy
    image: devth/helm
    environment:
        name: smoprod
        url: https://${CF_SMOPROD_URL}
    variables:
        HOSTING_ENV: Production
    script:
        - init_gke
        - helm upgrade
          --install
          --namespace ${KUBE_NAMESPACE}
          --set web.image="${CF_APP_IMAGE}"
          --set web.host="${CF_SMOPROD_URL}"
          --set app.env="${HOSTING_ENV}"
          --set deployment.namespace="${KUBE_NAMESPACE}"
          --set ci.project.path="${CI_PROJECT_PATH_SLUG}"
          --set ci.project.environment="${CI_ENVIRONMENT_SLUG}"
          --set app.secret.appdbconnectionstring="${LINUX_DBCONNECTION_STRING}"
          --set app.secret.postgresuser="${POSTGRES_DB_USER}"
          --set app.secret.postgrespassword="${POSTGRES_DB_PASSWORD}"
          --set app.secret.appserviceaccount="${APPLICATION_GCP_SERVICEACCOUNT}"
          --set app.secret.googlebucketname="${APP_GOOGLE_BUCKET_NAME}"
          --wait
          clearfusion
          ./k8s-chart
    only:
        refs:
            - master

.functions: &functions |
    # Functions
    function init_gke() {
        mkdir -p /etc/deploy
        echo ${GKE_SERVICE_ACCOUNT} | base64 -d > /etc/deploy/sa.json
        gcloud auth activate-service-account --key-file=/etc/deploy/sa.json --project=${GKE_PROJECT}
        gcloud container clusters get-credentials ${GKE_CLUSTER_NAME} --zone=${GKE_ZONE} --project=${GKE_PROJECT}
    }

before_script:
- *functions