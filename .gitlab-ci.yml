stages:
    - build-apps
    - integration
    - deploy

variables:
    GKE_SERVICE_ACCOUNT: ${GKE_SERVICE_ACCOUNT}
    CF_CLEAN_URL: cleantestedg.cha-net.org
    CF_REVIEW_URL: review.cha-net.org
    CF_CHAPROD_URL: manage.cha-net.org
    CF_APP_NAME: clearfusion-${CI_COMMIT_REF_SLUG}
    CF_APP_IMAGE_TAG: ${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHORT_SHA}
    CF_APP_GITLAB_IMAGE: ${CI_REGISTRY_IMAGE}:${CF_APP_IMAGE_TAG}
    CI_GCP_REGISTRY_IMAGE: eu.gcr.io/${GKE_PROJECT}/clear-fusion-cloud
    CF_APP_GCP_IMAGE: ${CI_GCP_REGISTRY_IMAGE}:${CF_APP_IMAGE_TAG}
    ENVIRONMENT: "Production"
    DOCKER_TLS_CERTDIR: ""
    KUBE_NAMESPACE: gitlab-managed-apps

build-newui:
    image: node:latest
    stage: build-apps
    before_script:
        - apt-get update && apt-get install -y unzip fontconfig locales gconf-service libasound2 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 ca-certificates fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils wget
        - cd HumanitarianAssistance.WebApi/NewUI/
        - npm install
    script:
         - npm run build --prod
        
        # - ./node_modules/@angular/cli/bin/ng build --prod 
    artifacts:
        paths:
            - HumanitarianAssistance.WebApi/NewUI/dist/


build-oldui:
    image: node:latest
    stage: build-apps
    before_script:
        - apt-get update && apt-get install -y unzip fontconfig locales gconf-service libasound2 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 ca-certificates fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils wget
        - cd HumanitarianAssistance.WebApi/OldUI/
        - npm install
    script:
       - npm run build --prod
       # - ./node_modules/@angular/cli/bin/ng build --prod 
    artifacts:
        paths:
            - HumanitarianAssistance.WebApi/OldUI/dist/

build-backend:
    image: microsoft/dotnet:latest
    stage: build-apps
    before_script:
        - cd HumanitarianAssistance.WebApi
        - dotnet restore
    script:
        - dotnet publish -c Release -o release
    artifacts:
        paths:
            - HumanitarianAssistance.WebApi/release/

publish-container:
    image: google/cloud-sdk
    services:
        - docker:18.09.7-dind
    stage: integration
    script:
        - cp -r HumanitarianAssistance.WebApi/NewUI/dist/ HumanitarianAssistance.WebApi/release/NewUI/dist
        - cp -r HumanitarianAssistance.WebApi/OldUI/dist/ HumanitarianAssistance.WebApi/release/OldUI/dist
        - init_gcp_docker
        - docker pull ${CF_APP_GCP_IMAGE} || true
        - docker build --cache-from ${CF_APP_GCP_IMAGE} -t ${CF_APP_GCP_IMAGE} -f ./Dockerfile .
        - docker push ${CF_APP_GCP_IMAGE}

deploy-cleanarch:
    stage: deploy
    image: devth/helm
    environment:
        name: cleanarch
        url: https://${CF_CLEAN_URL}
    script:
        - init_gke
        - helm upgrade
          --tiller-namespace ${KUBE_NAMESPACE}
          --install
          --set web.name="${CF_APP_NAME}"
          --set web.image="${CF_APP_GCP_IMAGE}"
          --set web.host="${CF_CLEAN_URL}"
          --set app.env=${ENVIRONMENT}
          --set deployment.namespace="${KUBE_NAMESPACE}"
          --set ci.project.path="${CI_PROJECT_PATH_SLUG}"
          --set ci.project.environment="${CI_ENVIRONMENT_SLUG}"
          --set secret.appdbconnectionstring="${LINUX_DBCONNECTION_STRING}"
          --set secret.postgresuser="${POSTGRES_DB_USER}"
          --set secret.postgrespassword="${POSTGRES_DB_PASSWORD}"
          --set secret.appserviceaccount="${APPLICATION_GCP_SERVICEACCOUNT}"
          --set secret.googlebucketname="${APP_GOOGLE_BUCKET_NAME}"
          --wait
          --force
          clearfusion-${CI_COMMIT_REF_SLUG}
          ./k8s-chart


deploy-review:
    stage: deploy
    image: devth/helm
    environment:
        name: review
        url: https://${CF_REVIEW_URL}
    script:
        - init_gke
        - helm upgrade
          --install
          --set web.name="${CF_APP_NAME}"
          --set web.image="${CF_APP_GITLAB_IMAGE}"
          --set web.host="${CF_REVIEW_URL}"
          --set app.env=${ENVIRONMENT}
          --set deployment.namespace="${KUBE_NAMESPACE}"
          --set ci.project.path="${CI_PROJECT_PATH_SLUG}"
          --set ci.project.environment="${CI_ENVIRONMENT_SLUG}"
          --set secret.appdbconnectionstring="${LINUX_DBCONNECTION_STRING}"
          --set secret.postgresuser="${POSTGRES_DB_USER}"
          --set secret.postgrespassword="${POSTGRES_DB_PASSWORD}"
          --set secret.appserviceaccount="${APPLICATION_GCP_SERVICEACCOUNT}"
          --set secret.googlebucketname="${APP_GOOGLE_BUCKET_NAME}"
          --wait
          --force
          clearfusion-${CI_COMMIT_REF_SLUG}
          ./k8s-chart
    only:
        refs:
            - review


deploy-chaprod:
    stage: deploy
    image: devth/helm
    environment:
        name: chaprod
        url: https://manage.cha-net.org
    script:
        - init_gke
        - helm upgrade
          --install
          --set web.name="${CF_APP_NAME}"
          --set web.image="${CF_APP_GITLAB_IMAGE}"
          --set web.host="${CF_CHAPROD_URL}"
          --set app.env="Production"
          --set deployment.namespace="${KUBE_NAMESPACE}"
          --set ci.project.path="${CI_PROJECT_PATH_SLUG}"
          --set ci.project.environment="${CI_ENVIRONMENT_SLUG}"
          --set secret.appdbconnectionstring="${LINUX_DBCONNECTION_STRING}"
          --set secret.postgresuser="${POSTGRES_DB_USER}"
          --set secret.postgrespassword="${POSTGRES_DB_PASSWORD}"
          --set secret.appserviceaccount="${APPLICATION_GCP_SERVICEACCOUNT}"
          --set secret.googlebucketname="${APP_GOOGLE_BUCKET_NAME}"
          --wait
          --force
          clearfusion-${CI_COMMIT_REF_SLUG}
          ./k8s-chart
    only:
        refs:
            - master

            
.functions: &functions |
    # Functions
    function init_gcp_docker() {
        mkdir -p /etc/deploy
        echo ${GKE_SERVICE_ACCOUNT} | base64 -d > /etc/deploy/sa.json
        gcloud auth activate-service-account --key-file /etc/deploy/sa.json --project=${GKE_PROJECT}
        gcloud auth configure-docker --project=${GKE_PROJECT}
    }
    function init_gke() {
        mkdir -p /etc/deploy
        echo ${GKE_SERVICE_ACCOUNT} | base64 -d > /etc/deploy/sa.json
        gcloud auth activate-service-account --key-file /etc/deploy/sa.json --project=${GKE_PROJECT}
        gcloud container clusters get-credentials ${GKE_CLUSTER_NAME} --zone ${GKE_ZONE} --project ${GKE_PROJECT}
    }

before_script:
- *functions
