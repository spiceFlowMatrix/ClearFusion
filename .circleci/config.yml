version: 2.1
jobs:
  build-job:
    docker:
      - image: microsoft/dotnet:2.2-sdk
    steps:
      - run: 
          name: install node
          command: "curl -sL https://deb.nodesource.com/setup_10.x | bash -  && apt update  && apt install -y nodejs"
      - run: npm cache clean -f
      - run: npm install -g n
      - run: n stable
      - run: node -v
      - run: npm -v
      - run: npm install -g @angular/cli
      
      - checkout
      - run: dotnet --info

      - run: dotnet restore
      - run: dotnet clean
      - run: dotnet publish HumanitarianAssistance.WebApi/HumanitarianAssistance.WebApi.csproj /p:Configuration=Release /p:EnvironmentName=Staging -o releasefolder
      - run: mkdir HumanitarianAssistance.WebApi/releasefolder/Documents

      - persist_to_workspace:
          root: .
          paths: 
            - HumanitarianAssistance.WebApi/releasefolder
            - Dockerfile
            - .dockerignore
  push-container:
    docker:
      - image: google/cloud-sdk
    steps:
      - attach_workspace:
          at: workspace
      - run: find .
      - run:
          name: Set up Google cloud SDK. Important to set up cluster based on deployment
          command: |
            echo $GCLOUD_SERVICE_KEY > gcloud-service-key.json
            gcloud auth activate-service-account --key-file gcloud-service-key.json
            gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
            gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
      - setup_remote_docker
      - run:
          name: Tag docker image to GCR registry
          command: |
            docker build -t ${APPLICATION_NAME}:${CIRCLE_SHA1} ./workspace
            docker tag ${APPLICATION_NAME}:${CIRCLE_SHA1} eu.gcr.io/${GOOGLE_PROJECT_ID}/${APPLICATION_NAME}:${CIRCLE_SHA1}
            gcloud auth configure-docker
            docker push eu.gcr.io/${GOOGLE_PROJECT_ID}/${APPLICATION_NAME}:${CIRCLE_SHA1}
      - run: echo ${APPLICATION_NAME}:${CIRCLE_SHA1}
  deploy-staging-edg:
    docker:
      - image: google/cloud-sdk
    steps:
      - run:
          name: Set up Google cloud SDK. Important to set up cluster based on deployment
          command: |
            echo $GCLOUD_SERVICE_KEY > gcloud-service-key.json
            gcloud auth activate-service-account --key-file gcloud-service-key.json
            gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
            gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
            gcloud --quiet container clusters get-credentials ${GOOGLE_STAGING_CLUSTER_NAME}
      - setup_remote_docker
      - run:
          name: Patch K8 deployment with new container
          command: |
            kubectl patch deployment ${KUBDEPLOYMENT_EDGSTAGINGAPI_STAGING} -p '{"spec":{"template":{"spec":{"containers":[{"name":"'"$APPLICATION_NAME"'","image":"eu.gcr.io/'"$GOOGLE_PROJECT_ID"'/'"$APPLICATION_NAME"':'"$CIRCLE_SHA1"'"}]}}}}'
            kubectl rollout status deployment/${KUBDEPLOYMENT_EDGSTAGINGAPI_STAGING}
            kubectl get pods
  deploy-bmount-prod:
    docker:
      - image: google/cloud-sdk
    steps:
      - run:
          name: Set up Google cloud SDK. Important to set up cluster based on deployment
          command: |
            echo $GCLOUD_SERVICE_KEY > gcloud-service-key.json
            gcloud auth activate-service-account --key-file gcloud-service-key.json
            gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
            gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
            gcloud --quiet container clusters get-credentials ${GOOGLE_PRODUCTION_CLUSTER_NAME}
      - setup_remote_docker
      - run:
          name: Patch K8 deployment with new container
          command: |
            kubectl patch deployment ${KUBDEPLOYMENT_BMOUNTAPI_PROD} -p '{"spec":{"template":{"spec":{"containers":[{"name":"'"$APPLICATION_NAME"'","image":"eu.gcr.io/'"$GOOGLE_PROJECT_ID"'/'"$APPLICATION_NAME"':'"$CIRCLE_SHA1"'"}]}}}}'
            kubectl rollout status deployment/${KUBDEPLOYMENT_BMOUNTAPI_PROD}
            kubectl get pods
  deploy-cha-prod:
    docker:
      - image: google/cloud-sdk
    steps:
      - run:
          name: Set up Google cloud SDK. Important to set up cluster based on deployment
          command: |
            echo $GCLOUD_SERVICE_KEY > gcloud-service-key.json
            gcloud auth activate-service-account --key-file gcloud-service-key.json
            gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
            gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
            gcloud --quiet container clusters get-credentials ${GOOGLE_PRODUCTION_CLUSTER_NAME}
      - setup_remote_docker
      - run:
          name: Patch K8 deployment with new container
          command: |
            kubectl patch deployment ${KUBDEPLOYMENT_CHAAPI_PROD} -p '{"spec":{"template":{"spec":{"containers":[{"name":"'"$APPLICATION_NAME"'","image":"eu.gcr.io/'"$GOOGLE_PROJECT_ID"'/'"$APPLICATION_NAME"':'"$CIRCLE_SHA1"'"}]}}}}' --namespace=cha-org
            kubectl rollout status deployment/${KUBDEPLOYMENT_CHAAPI_PROD} --namespace=cha-org
            kubectl get pods --namespace=cha-org
  deploy-smo-prod:
    docker:
      - image: google/cloud-sdk
    steps:
      - run:
          name: Set up Google cloud SDK. Important to set up cluster based on deployment
          command: |
            echo $GCLOUD_SERVICE_KEY > gcloud-service-key.json
            gcloud auth activate-service-account --key-file gcloud-service-key.json
            gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
            gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
            gcloud --quiet container clusters get-credentials ${GOOGLE_PRODUCTION_CLUSTER_NAME}
      - setup_remote_docker
      - run:
          name: Patch K8 deployment with new container
          command: |
            kubectl patch deployment ${KUBDEPLOYMENT_SMOAPI_PROD} -p '{"spec":{"template":{"spec":{"containers":[{"name":"'"$APPLICATION_NAME"'","image":"eu.gcr.io/'"$GOOGLE_PROJECT_ID"'/'"$APPLICATION_NAME"':'"$CIRCLE_SHA1"'"}]}}}}' --namespace=smo-org
            kubectl rollout status deployment/${KUBDEPLOYMENT_SMOAPI_PROD} --namespace=smo-org
            kubectl get pods --namespace=smo-org
  deploy-noon-prod:
    docker:
      - image: google/cloud-sdk
    steps:
      - run:
          name: Set up Google cloud SDK. Important to set up cluster based on deployment
          command: |
            echo $GCLOUD_SERVICE_KEY > gcloud-service-key.json
            gcloud auth activate-service-account --key-file gcloud-service-key.json
            gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
            gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
            gcloud --quiet container clusters get-credentials ${GOOGLE_PRODUCTION_CLUSTER_NAME}
      - setup_remote_docker
      - run:
          name: Patch K8 deployment with new container
          command: |
            kubectl patch deployment ${KUBDEPLOYMENT_NOONAPI_PROD} -p '{"spec":{"template":{"spec":{"containers":[{"name":"'"$APPLICATION_NAME"'","image":"eu.gcr.io/'"$GOOGLE_PROJECT_ID"'/'"$APPLICATION_NAME"':'"$CIRCLE_SHA1"'"}]}}}}' --namespace=noon-org
            kubectl rollout status deployment/${KUBDEPLOYMENT_NOONAPI_PROD} --namespace=noon-org
            kubectl get pods --namespace=noon-org
  deploy-edg-prod:
    docker:
      - image: google/cloud-sdk
    steps:
      - run:
          name: Set up Google cloud SDK. Important to set up cluster based on deployment
          command: |
            echo $GCLOUD_SERVICE_KEY > gcloud-service-key.json
            gcloud auth activate-service-account --key-file gcloud-service-key.json
            gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
            gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
            gcloud --quiet container clusters get-credentials ${GOOGLE_PRODUCTION_CLUSTER_NAME}
      - setup_remote_docker
      - run:
          name: Patch K8 deployment with new container
          command: |
            kubectl patch deployment ${KUBDEPLOYMENT_EDGEAPI_PROD} -p '{"spec":{"template":{"spec":{"containers":[{"name":"'"$APPLICATION_NAME"'","image":"eu.gcr.io/'"$GOOGLE_PROJECT_ID"'/'"$APPLICATION_NAME"':'"$CIRCLE_SHA1"'"}]}}}}' --namespace=edgsolutions-org
            kubectl rollout status deployment/${KUBDEPLOYMENT_EDGEAPI_PROD} --namespace=edgsolutions-org
            kubectl get pods --namespace=edgsolutions-org
workflows:
  version: 2.1
  clearfusion-api-build-deploy:
    jobs:
      - build-job
      - push-container:
          requires:
          - build-job
      - deploy-staging-edg:
          requires:
          - push-container
      - deploy-bmount-prod:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - deploy-cha-prod:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - deploy-smo-prod:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - deploy-noon-prod:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - deploy-edg-prod:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
  
