--select * from get_budget_line_list(1);
--drop function get_budget_line_list(project_id bigint);

CREATE OR REPLACE FUNCTION public.get_budget_line_list(project_id bigint)
returns TABLE (
budgetlineid bigint,
budgetcode text,
budgetname text,
projectid bigint,
currencyid integer,	
currencyname character varying(50),
initialbudget DOUBLE PRECISION,
projectjobcode text,	
projectjobid bigint,
projectjobname text,
createddate timestamp without time zone,
debitpercentage DOUBLE PRECISION,
expenditure DOUBLE PRECISION 
) 
LANGUAGE 'plpgsql'
    COST 100
    VOLATILE 
    ROWS 1000
AS $BODY$
DECLARE 
project_id_value bigint = project_id;
debit_percentage_amt DOUBLE PRECISION;
expenditure_amt DOUBLE PRECISION;
debit_amt integer;

Begin

select sum("Debit") into debit_amt from "VoucherTransactions" where "ProjectId" = project_id;

return Query select distinct pbl."BudgetLineId",pbl."BudgetCode",pbl."BudgetName",pbl."ProjectId",pbl."CurrencyId",
cd."CurrencyName",pbl."InitialBudget",pjd."ProjectJobCode",pbl."ProjectJobId",pjd."ProjectJobName",
pbl."CreatedDate",get_debit_percentage(pbl."BudgetLineId",pbl."InitialBudget") as "debit_percentage_amt",
get_total_expenditure(pbl."BudgetLineId",vt."CurrencyId",pbl."CurrencyId",vt."TransactionDate") as expenditure_amt
from "ProjectBudgetLineDetail" as pbl
FULL OUTER JOIN "VoucherTransactions" as vt
on pbl."BudgetLineId" = vt."BudgetLineId"
FULL OUTER JOIN "VoucherDetail" as vd
on  vt."VoucherNo" = vd."VoucherNo"
FULL OUTER JOIN "CurrencyDetails" as cd
on pbl."CurrencyId" = cd."CurrencyId"
FULL OUTER JOIN "ProjectJobDetail" as pjd
on pbl."ProjectJobId" = pjd."ProjectJobId"
where pbl."ProjectId" = project_id and pbl."IsDeleted"=false
order by pbl."CreatedDate";
END;
$BODY$;