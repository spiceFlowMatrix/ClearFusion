<Project Sdk="Microsoft.NET.Sdk.Web">

  <PropertyGroup>
    <TargetFramework>netcoreapp2.2</TargetFramework>
    <!-- <TargetLatestRuntimePatch>true</TargetLatestRuntimePatch> -->
    <TypeScriptCompileBlocked>true</TypeScriptCompileBlocked>
    <TypeScriptToolsVersion>Latest</TypeScriptToolsVersion>
    <IsPackable>false</IsPackable>

    <SpaRootOldUI>OldUI\</SpaRootOldUI>
    <SpaRootNewUI>NewUI\</SpaRootNewUI>
    <SpaRootClientApp>ClientApp\</SpaRootClientApp>


    <DefaultItemExcludes>$(DefaultItemExcludes);$(SpaRootOldUI)node_modules\**</DefaultItemExcludes>
    <DefaultItemExcludes>$(DefaultItemExcludes);$(SpaRootNewUI)node_modules\**</DefaultItemExcludes>
    <DefaultItemExcludes>$(DefaultItemExcludes);$(SpaRootClientApp)node_modules\**</DefaultItemExcludes>

    <!-- Set this to true if you enable server-side prerendering -->
    <BuildServerSideRenderer>false</BuildServerSideRenderer>


    <!--swagger doc-->
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
    <NoWarn>$(NoWarn);1591</NoWarn>

  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.AspNetCore.App" />
    <PackageReference Include="Microsoft.AspNetCore.Razor.Design" Version="2.2.0" PrivateAssets="All" />
    <PackageReference Include="Swashbuckle.AspNetCore" Version="4.0.1" />
  </ItemGroup>




  <ItemGroup>
    <!-- Don't publish the SPA source files, but do show them in the project files list -->
    <Content Remove="$(SpaRootOldUI)**" />
    <None Include="$(SpaRootOldUI)**" Exclude="$(SpaRootOldUI)node_modules\**" />

    <!-- Don't publish the SPA source files, but do show them in the project files list -->
    <Content Remove="$(SpaRootNewUI)**" />
    <None Include="$(SpaRootNewUI)**" Exclude="$(SpaRootNewUI)node_modules\**" />

    <!-- Don't publish the SPA source files, but do show them in the project files list -->
    <Content Remove="$(SpaRootClientApp)**" />
    <None Include="$(SpaRootClientApp)**" Exclude="$(SpaRootClientApp)node_modules\**" />
  </ItemGroup>




  <ItemGroup>
    <ProjectReference Include="..\HumanitarianAssistance.Entities\HumanitarianAssistance.ViewModels.csproj" />
    <ProjectReference Include="..\HumanitarianAssistance.Service\HumanitarianAssistance.Service.csproj" />
  </ItemGroup>

  <ItemGroup>
    <Folder Include="ClientApp\" />
    <Folder Include="NewUI\" />
    <Folder Include="OldUI\" />
  </ItemGroup>





  <!-- newui -->
  <Target Name="DebugEnsureNodeEnv" BeforeTargets="Build" Condition=" '$(Configuration)' == 'Debug' And !Exists('$(SpaRootOldUI)node_modules') ">
    <!-- Ensure Node.js is installed -->
    <Exec Command="node --version" ContinueOnError="true">
      <Output TaskParameter="ExitCode" PropertyName="ErrorCode" />
    </Exec>
    <Error Condition="'$(ErrorCode)' != '0'" Text="Node.js is required to build and run this project. To continue, please install Node.js from https://nodejs.org/, and then restart your command prompt or IDE." />
    <Message Importance="high" Text="Restoring dependencies using 'npm'. This may take several minutes..." />
    <Exec WorkingDirectory="$(SpaRootOldUI)" Command="npm install" />
  </Target>

  <!-- oldui -->
  <Target Name="DebugEnsureNodeEnv" BeforeTargets="Build" Condition=" '$(Configuration)' == 'Debug' And !Exists('$(SpaRootNewUI)node_modules') ">
    <!-- Ensure Node.js is installed -->
    <Exec Command="node --version" ContinueOnError="true">
      <Output TaskParameter="ExitCode" PropertyName="ErrorCode" />
    </Exec>
    <Error Condition="'$(ErrorCode)' != '0'" Text="Node.js is required to build and run this project. To continue, please install Node.js from https://nodejs.org/, and then restart your command prompt or IDE." />
    <Message Importance="high" Text="Restoring dependencies using 'npm'. This may take several minutes..." />
    <Exec WorkingDirectory="$(SpaRootNewUI)" Command="npm install" />
  </Target>

  <!-- clientapp -->
  <Target Name="DebugEnsureNodeEnv" BeforeTargets="Build" Condition=" '$(Configuration)' == 'Debug' And !Exists('$(SpaRootClientApp)node_modules') ">
    <!-- Ensure Node.js is installed -->
    <Exec Command="node --version" ContinueOnError="true">
      <Output TaskParameter="ExitCode" PropertyName="ErrorCode" />
    </Exec>
    <Error Condition="'$(ErrorCode)' != '0'" Text="Node.js is required to build and run this project. To continue, please install Node.js from https://nodejs.org/, and then restart your command prompt or IDE." />
    <Message Importance="high" Text="Restoring dependencies using 'npm'. This may take several minutes..." />
    <Exec WorkingDirectory="$(SpaRootClientApp)" Command="npm install" />
  </Target>





  <Target Name="PublishRunWebpack" AfterTargets="ComputeFilesToPublish">

    <!-- As part of publishing, ensure the JS resources are freshly built in production mode -->
    <Exec WorkingDirectory="$(SpaRootOldUI)" Command="npm install" />
    <Exec WorkingDirectory="$(SpaRootOldUI)" Command="npm run build" />
    <Exec WorkingDirectory="$(SpaRootOldUI)" Command="npm run build:ssr" Condition=" '$(BuildServerSideRenderer)' == 'true' " />

    <!-- Include the newly-built files in the publish output -->
    <ItemGroup>
      <DistFiles Include="$(SpaRootOldUI)dist\**; $(SpaRootOldUI)dist-server\**" />
      <DistFiles Include="$(SpaRootOldUI)node_modules\**" Condition="'$(BuildServerSideRenderer)' == 'true'" />
      <ResolvedFileToPublish Include="@(DistFiles->'%(FullPath)')" Exclude="@(ResolvedFileToPublish)">
        <RelativePath>%(DistFiles.Identity)</RelativePath>
        <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
      </ResolvedFileToPublish>
    </ItemGroup>


    <!-- As part of publishing, ensure the JS resources are freshly built in production mode -->
    <Exec WorkingDirectory="$(SpaRootNewUI)" Command="npm install" />
    <Exec WorkingDirectory="$(SpaRootNewUI)" Command="npm run build" />
    <Exec WorkingDirectory="$(SpaRootNewUI)" Command="npm run build:ssr" Condition=" '$(BuildServerSideRenderer)' == 'true' " />

    <!-- Include the newly-built files in the publish output -->
    <ItemGroup>
      <DistFiles Include="$(SpaRootNewUI)dist\**; $(SpaRootNewUI)dist-server\**" />
      <DistFiles Include="$(SpaRootNewUI)node_modules\**" Condition="'$(BuildServerSideRenderer)' == 'true'" />
      <ResolvedFileToPublish Include="@(DistFiles->'%(FullPath)')" Exclude="@(ResolvedFileToPublish)">
        <RelativePath>%(DistFiles.Identity)</RelativePath>
        <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
      </ResolvedFileToPublish>
    </ItemGroup>


    <!-- As part of publishing, ensure the JS resources are freshly built in production mode -->
    <Exec WorkingDirectory="$(SpaRootClientApp)" Command="npm install" />
    <Exec WorkingDirectory="$(SpaRootClientApp)" Command="npm run build" />
    <Exec WorkingDirectory="$(SpaRootClientApp)" Command="npm run build:ssr" Condition=" '$(BuildServerSideRenderer)' == 'true' " />

    <!-- Include the newly-built files in the publish output -->
    <ItemGroup>
      <DistFiles Include="$(SpaRootClientApp)dist\**; $(SpaRootClientApp)dist-server\**" />
      <DistFiles Include="$(SpaRootClientApp)node_modules\**" Condition="'$(BuildServerSideRenderer)' == 'true'" />
      <ResolvedFileToPublish Include="@(DistFiles->'%(FullPath)')" Exclude="@(ResolvedFileToPublish)">
        <RelativePath>%(DistFiles.Identity)</RelativePath>
        <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
      </ResolvedFileToPublish>
    </ItemGroup>

  </Target>
</Project>