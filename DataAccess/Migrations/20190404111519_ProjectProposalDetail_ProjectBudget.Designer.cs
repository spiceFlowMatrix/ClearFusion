// <auto-generated />
using System;
using HumanitarianAssistance.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190404111519_ProjectProposalDetail_ProjectBudget")]
    partial class ProjectProposalDetail_ProjectBudget
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024");

            modelBuilder.Entity("DataAccess.DbEntities.AccountHeadType", b =>
                {
                    b.Property<int>("AccountHeadTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("AccountHeadTypeName");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool>("IsCreditBalancetype");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("AccountHeadTypeId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("AccountHeadType");

                    b.HasData(
                        new { AccountHeadTypeId = 1, AccountHeadTypeName = "Assets", IsCreditBalancetype = false, IsDeleted = false },
                        new { AccountHeadTypeId = 2, AccountHeadTypeName = "Liabilities", IsCreditBalancetype = true, IsDeleted = false },
                        new { AccountHeadTypeId = 3, AccountHeadTypeName = "Donors Equity", IsCreditBalancetype = true, IsDeleted = false },
                        new { AccountHeadTypeId = 4, AccountHeadTypeName = "Income", IsCreditBalancetype = true, IsDeleted = false },
                        new { AccountHeadTypeId = 5, AccountHeadTypeName = "Expense", IsCreditBalancetype = false, IsDeleted = false }
                    );
                });

            modelBuilder.Entity("DataAccess.DbEntities.AccountingNew.AccountFilterType", b =>
                {
                    b.Property<int>("AccountFilterTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("AccountFilterTypeName");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("AccountFilterTypeId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("AccountFilterType");

                    b.HasData(
                        new { AccountFilterTypeId = 1, AccountFilterTypeName = "Inventory Account", IsDeleted = false },
                        new { AccountFilterTypeId = 2, AccountFilterTypeName = "Salary Account", IsDeleted = false }
                    );
                });

            modelBuilder.Entity("DataAccess.DbEntities.AccountingNew.ChartOfAccountNew", b =>
                {
                    b.Property<long>("ChartOfAccountNewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<int?>("AccountFilterTypeId");

                    b.Property<int>("AccountHeadTypeId");

                    b.Property<int>("AccountLevelId");

                    b.Property<string>("AccountName")
                        .HasMaxLength(100);

                    b.Property<int?>("AccountTypeId");

                    b.Property<string>("ChartOfAccountNewCode");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsCreditBalancetype");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<long>("ParentID");

                    b.HasKey("ChartOfAccountNewId");

                    b.HasIndex("AccountFilterTypeId");

                    b.HasIndex("AccountLevelId");

                    b.HasIndex("AccountTypeId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("ChartOfAccountNew");
                });

            modelBuilder.Entity("DataAccess.DbEntities.AccountingNew.ExchangeRateVerification", b =>
                {
                    b.Property<long>("ExRateVerificationId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<DateTime>("Date");

                    b.Property<bool?>("IsDeleted");

                    b.Property<bool>("IsVerified");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("ExRateVerificationId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("ExchangeRateVerifications");
                });

            modelBuilder.Entity("DataAccess.DbEntities.AccountLevel", b =>
                {
                    b.Property<int>("AccountLevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("AccountLevelName")
                        .HasMaxLength(50);

                    b.HasKey("AccountLevelId");

                    b.ToTable("AccountLevel");

                    b.HasData(
                        new { AccountLevelId = 1, AccountLevelName = "Main Level Accounts" },
                        new { AccountLevelId = 2, AccountLevelName = "Control Level Accounts" },
                        new { AccountLevelId = 3, AccountLevelName = "Sub Level Accounts" },
                        new { AccountLevelId = 4, AccountLevelName = "Input Level Accounts" }
                    );
                });

            modelBuilder.Entity("DataAccess.DbEntities.AccountType", b =>
                {
                    b.Property<int>("AccountTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<int?>("AccountCategory");

                    b.Property<int>("AccountHeadTypeId");

                    b.Property<string>("AccountTypeName")
                        .HasMaxLength(100);

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("AccountTypeId");

                    b.HasIndex("AccountHeadTypeId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("AccountType");
                });

            modelBuilder.Entity("DataAccess.DbEntities.ActivityMaster", b =>
                {
                    b.Property<int>("ActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("ActivityName");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Priority")
                        .HasMaxLength(20);

                    b.Property<string>("Status")
                        .HasMaxLength(50);

                    b.Property<int>("TaskId");

                    b.HasKey("ActivityId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("TaskId");

                    b.ToTable("ActivityMaster");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Advances", b =>
                {
                    b.Property<int>("AdvancesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<double>("AdvanceAmount");

                    b.Property<DateTime>("AdvanceDate");

                    b.Property<DateTime>("AdvanceRecoveryDate");

                    b.Property<DateTime>("AppraisalApprovedDate");

                    b.Property<int>("ApprovedBy");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int>("CurrencyId");

                    b.Property<DateTime>("DeductedDate");

                    b.Property<string>("Description");

                    b.Property<string>("EmployeeCode");

                    b.Property<int>("EmployeeId");

                    b.Property<bool>("IsAdvanceRecovery");

                    b.Property<bool>("IsApproved");

                    b.Property<bool>("IsDeducted");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModeOfReturn");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int?>("NumberOfInstallments");

                    b.Property<int>("OfficeId");

                    b.Property<double>("RecoveredAmount");

                    b.Property<double>("RequestAmount");

                    b.Property<long>("VoucherReferenceNo");

                    b.HasKey("AdvancesId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ModifiedById");

                    b.ToTable("Advances");
                });

            modelBuilder.Entity("DataAccess.DbEntities.AgreeDisagreePermission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<bool>("Agree");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool>("Disagree");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int>("PageId");

                    b.Property<string>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("PageId");

                    b.ToTable("AgreeDisagreePermission");
                });

            modelBuilder.Entity("DataAccess.DbEntities.AnalyticalDetail", b =>
                {
                    b.Property<long>("AnalyticalId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Area")
                        .HasMaxLength(10);

                    b.Property<string>("Attachment")
                        .HasMaxLength(100);

                    b.Property<float?>("BLAmount");

                    b.Property<string>("BLCurrCode")
                        .HasMaxLength(5);

                    b.Property<byte>("BLType");

                    b.Property<string>("CostBook")
                        .HasMaxLength(10);

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("DonorCode")
                        .HasMaxLength(50);

                    b.Property<DateTime>("EndDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("Job")
                        .HasMaxLength(10);

                    b.Property<string>("MDCode")
                        .HasMaxLength(10);

                    b.Property<string>("MemoCode")
                        .HasMaxLength(10);

                    b.Property<string>("MemoName")
                        .HasMaxLength(200);

                    b.Property<byte>("MemoType");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Program")
                        .HasMaxLength(10);

                    b.Property<string>("Project")
                        .HasMaxLength(10);

                    b.Property<float?>("ReceivedAmount");

                    b.Property<string>("Sector")
                        .HasMaxLength(10);

                    b.Property<DateTime>("StartDate");

                    b.Property<byte>("Status");

                    b.HasKey("AnalyticalId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("AnalyticalDetail");
                });

            modelBuilder.Entity("DataAccess.DbEntities.ApplicationPages", b =>
                {
                    b.Property<int>("PageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int>("ModuleId");

                    b.Property<string>("ModuleName");

                    b.Property<string>("PageName");

                    b.HasKey("PageId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("ApplicationPages");

                    b.HasData(
                        new { PageId = 1, IsDeleted = false, ModuleId = 1, ModuleName = "Users", PageName = "Users" },
                        new { PageId = 2, IsDeleted = false, ModuleId = 2, ModuleName = "Code", PageName = "ChartOfAccount" },
                        new { PageId = 3, IsDeleted = false, ModuleId = 2, ModuleName = "Code", PageName = "JournalCodes" },
                        new { PageId = 4, IsDeleted = false, ModuleId = 2, ModuleName = "Code", PageName = "CurrencyCodes" },
                        new { PageId = 5, IsDeleted = false, ModuleId = 2, ModuleName = "Code", PageName = "OfficeCodes" },
                        new { PageId = 6, IsDeleted = false, ModuleId = 2, ModuleName = "Code", PageName = "FinancialYear" },
                        new { PageId = 7, IsDeleted = false, ModuleId = 2, ModuleName = "Code", PageName = "PensionRate" },
                        new { PageId = 8, IsDeleted = false, ModuleId = 2, ModuleName = "Code", PageName = "EmployeeContract" },
                        new { PageId = 9, IsDeleted = false, ModuleId = 2, ModuleName = "Code", PageName = "AppraisalQuestions" },
                        new { PageId = 10, IsDeleted = false, ModuleId = 2, ModuleName = "Code", PageName = "TechnicalQuestions" },
                        new { PageId = 11, IsDeleted = false, ModuleId = 2, ModuleName = "Code", PageName = "EmailSettings" },
                        new { PageId = 12, IsDeleted = false, ModuleId = 2, ModuleName = "Code", PageName = "ExchangeRate" },
                        new { PageId = 13, IsDeleted = false, ModuleId = 2, ModuleName = "Code", PageName = "LeaveReason" },
                        new { PageId = 14, IsDeleted = false, ModuleId = 2, ModuleName = "Code", PageName = "Profession" },
                        new { PageId = 15, IsDeleted = false, ModuleId = 2, ModuleName = "Code", PageName = "Department" },
                        new { PageId = 16, IsDeleted = false, ModuleId = 2, ModuleName = "Code", PageName = "Qualification" },
                        new { PageId = 17, IsDeleted = false, ModuleId = 2, ModuleName = "Code", PageName = "Designation" },
                        new { PageId = 18, IsDeleted = false, ModuleId = 2, ModuleName = "Code", PageName = "JobGrade" },
                        new { PageId = 19, IsDeleted = false, ModuleId = 2, ModuleName = "Code", PageName = "SalaryHead" },
                        new { PageId = 20, IsDeleted = false, ModuleId = 2, ModuleName = "Code", PageName = "SalaryTaxReportContent" },
                        new { PageId = 21, IsDeleted = false, ModuleId = 2, ModuleName = "Code", PageName = "SetPayrollAccount" },
                        new { PageId = 22, IsDeleted = true, ModuleId = 3, ModuleName = "Accounting", PageName = "Vouchers" },
                        new { PageId = 23, IsDeleted = false, ModuleId = 3, ModuleName = "Accounting", PageName = "Journal" },
                        new { PageId = 24, IsDeleted = false, ModuleId = 3, ModuleName = "Accounting", PageName = "LedgerStatement" },
                        new { PageId = 25, IsDeleted = false, ModuleId = 3, ModuleName = "Accounting", PageName = "BudgetBalance" },
                        new { PageId = 26, IsDeleted = false, ModuleId = 3, ModuleName = "Accounting", PageName = "TrialBalance" },
                        new { PageId = 27, IsDeleted = false, ModuleId = 3, ModuleName = "Accounting", PageName = "FinancialReport" },
                        new { PageId = 28, IsDeleted = true, ModuleId = 3, ModuleName = "Accounting", PageName = "CategoryPopulator" },
                        new { PageId = 29, IsDeleted = false, ModuleId = 3, ModuleName = "Accounting", PageName = "ExchangeGainLoss" },
                        new { PageId = 30, IsDeleted = false, ModuleId = 3, ModuleName = "Accounting", PageName = "GainLossTransaction" },
                        new { PageId = 31, IsDeleted = false, ModuleId = 3, ModuleName = "Accounting", PageName = "PensionPayments" },
                        new { PageId = 32, IsDeleted = false, ModuleId = 4, ModuleName = "HR", PageName = "Employees" },
                        new { PageId = 33, IsDeleted = false, ModuleId = 4, ModuleName = "HR", PageName = "PayrollDailyHours" },
                        new { PageId = 34, IsDeleted = false, ModuleId = 4, ModuleName = "HR", PageName = "Holidays" },
                        new { PageId = 35, IsDeleted = false, ModuleId = 4, ModuleName = "HR", PageName = "Attendance" },
                        new { PageId = 36, IsDeleted = false, ModuleId = 4, ModuleName = "HR", PageName = "ApproveLeave" },
                        new { PageId = 37, IsDeleted = false, ModuleId = 4, ModuleName = "HR", PageName = "MonthlyPayrollRegister" },
                        new { PageId = 38, IsDeleted = false, ModuleId = 4, ModuleName = "HR", PageName = "Jobs" },
                        new { PageId = 39, IsDeleted = false, ModuleId = 4, ModuleName = "HR", PageName = "Interview" },
                        new { PageId = 40, IsDeleted = false, ModuleId = 4, ModuleName = "HR", PageName = "EmployeeAppraisal" },
                        new { PageId = 41, IsDeleted = false, ModuleId = 4, ModuleName = "HR", PageName = "Advances" },
                        new { PageId = 42, IsDeleted = false, ModuleId = 4, ModuleName = "HR", PageName = "Summary" },
                        new { PageId = 43, IsDeleted = false, ModuleId = 5, ModuleName = "Store", PageName = "Categories" },
                        new { PageId = 44, IsDeleted = false, ModuleId = 5, ModuleName = "Store", PageName = "StoreSourceCodes" },
                        new { PageId = 45, IsDeleted = false, ModuleId = 5, ModuleName = "Store", PageName = "PaymentTypes" },
                        new { PageId = 46, IsDeleted = false, ModuleId = 5, ModuleName = "Store", PageName = "Store" },
                        new { PageId = 47, IsDeleted = false, ModuleId = 5, ModuleName = "Store", PageName = "ProcurementSummary" },
                        new { PageId = 48, IsDeleted = false, ModuleId = 5, ModuleName = "Store", PageName = "DepreciationReport" },
                        new { PageId = 49, IsDeleted = false, ModuleId = 6, ModuleName = "Marketing", PageName = "TimeCategory" },
                        new { PageId = 50, IsDeleted = false, ModuleId = 6, ModuleName = "Marketing", PageName = "Quality" },
                        new { PageId = 51, IsDeleted = false, ModuleId = 6, ModuleName = "Marketing", PageName = "Phase" },
                        new { PageId = 52, IsDeleted = false, ModuleId = 6, ModuleName = "Marketing", PageName = "Nature" },
                        new { PageId = 53, IsDeleted = false, ModuleId = 6, ModuleName = "Marketing", PageName = "Medium" },
                        new { PageId = 54, IsDeleted = false, ModuleId = 6, ModuleName = "Marketing", PageName = "MediaCategory" },
                        new { PageId = 55, IsDeleted = false, ModuleId = 6, ModuleName = "Marketing", PageName = "ActivityType" },
                        new { PageId = 56, IsDeleted = false, ModuleId = 7, ModuleName = "AccountingNew", PageName = "Assets" },
                        new { PageId = 57, IsDeleted = false, ModuleId = 7, ModuleName = "AccountingNew", PageName = "Liabilities" },
                        new { PageId = 58, IsDeleted = false, ModuleId = 7, ModuleName = "AccountingNew", PageName = "Income" },
                        new { PageId = 59, IsDeleted = false, ModuleId = 7, ModuleName = "AccountingNew", PageName = "Expense" },
                        new { PageId = 60, IsDeleted = false, ModuleId = 7, ModuleName = "AccountingNew", PageName = "BalanceSheet" },
                        new { PageId = 61, IsDeleted = false, ModuleId = 7, ModuleName = "AccountingNew", PageName = "IncomeExpenseReport" },
                        new { PageId = 62, IsDeleted = false, ModuleId = 7, ModuleName = "AccountingNew", PageName = "Vouchers" },
                        new { PageId = 63, IsDeleted = false, ModuleId = 6, ModuleName = "Marketing", PageName = "Clients" },
                        new { PageId = 64, IsDeleted = false, ModuleId = 6, ModuleName = "Marketing", PageName = "UnitRates" },
                        new { PageId = 65, IsDeleted = false, ModuleId = 6, ModuleName = "Marketing", PageName = "Jobs" },
                        new { PageId = 66, IsDeleted = false, ModuleId = 6, ModuleName = "Marketing", PageName = "Contracts" },
                        new { PageId = 67, IsDeleted = false, ModuleId = 8, ModuleName = "Projects", PageName = "MyProjects" },
                        new { PageId = 68, IsDeleted = false, ModuleId = 8, ModuleName = "Projects", PageName = "Donors" },
                        new { PageId = 69, IsDeleted = false, ModuleId = 8, ModuleName = "Projects", PageName = "ProjectDetails" },
                        new { PageId = 70, IsDeleted = false, ModuleId = 8, ModuleName = "Projects", PageName = "Proposal" },
                        new { PageId = 71, IsDeleted = false, ModuleId = 8, ModuleName = "Projects", PageName = "CriteriaEvaluation" },
                        new { PageId = 72, IsDeleted = false, ModuleId = 6, ModuleName = "Marketing", PageName = "Producer" },
                        new { PageId = 73, IsDeleted = false, ModuleId = 6, ModuleName = "Marketing", PageName = "Policy" },
                        new { PageId = 74, IsDeleted = false, ModuleId = 8, ModuleName = "Projects", PageName = "ProjectJobs" },
                        new { PageId = 75, IsDeleted = false, ModuleId = 8, ModuleName = "Projects", PageName = "ProjectActivities" },
                        new { PageId = 76, IsDeleted = false, ModuleId = 6, ModuleName = "Marketing", PageName = "Channel" },
                        new { PageId = 77, IsDeleted = false, ModuleId = 6, ModuleName = "Marketing", PageName = "Scheduler" }
                    );
                });

            modelBuilder.Entity("DataAccess.DbEntities.AppraisalGeneralQuestions", b =>
                {
                    b.Property<int>("AppraisalGeneralQuestionsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("DariQuestion");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int?>("OfficeId");

                    b.Property<string>("Question");

                    b.Property<int?>("SequenceNo");

                    b.HasKey("AppraisalGeneralQuestionsId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("AppraisalGeneralQuestions");
                });

            modelBuilder.Entity("DataAccess.DbEntities.ApproveRejectPermission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<bool>("Approve");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int>("PageId");

                    b.Property<bool>("Reject");

                    b.Property<string>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("PageId");

                    b.ToTable("ApproveRejectPermission");
                });

            modelBuilder.Entity("DataAccess.DbEntities.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("DataAccess.DbEntities.AssignActivity", b =>
                {
                    b.Property<long>("AssignActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<int>("ActivityId");

                    b.Property<DateTime?>("ActualEndDate");

                    b.Property<DateTime?>("ActualStartDate");

                    b.Property<string>("ApprovedStatus")
                        .HasMaxLength(30);

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<DateTime?>("PlannedEndDate");

                    b.Property<DateTime?>("PlannedStartDate");

                    b.Property<long>("ProjectId");

                    b.Property<string>("Status")
                        .HasMaxLength(20);

                    b.Property<int>("TaskId");

                    b.Property<string>("UserId");

                    b.HasKey("AssignActivityId");

                    b.HasIndex("ActivityId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ProjectId");

                    b.HasIndex("TaskId");

                    b.HasIndex("UserId");

                    b.ToTable("AssignActivity");
                });

            modelBuilder.Entity("DataAccess.DbEntities.AssignActivityApproveBy", b =>
                {
                    b.Property<long>("AssignActivityApprovedById")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("ApprovedById");

                    b.Property<long>("AssignActivityId");

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("Status")
                        .HasMaxLength(20);

                    b.HasKey("AssignActivityApprovedById");

                    b.HasIndex("ApprovedById");

                    b.HasIndex("AssignActivityId");

                    b.ToTable("AssignActivityApproveBy");
                });

            modelBuilder.Entity("DataAccess.DbEntities.AssignActivityFeedback", b =>
                {
                    b.Property<long>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<long>("AssignActivityId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Feedback");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("UserId");

                    b.HasKey("FeedbackId");

                    b.HasIndex("AssignActivityId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("UserId");

                    b.ToTable("AssignActivityFeedback");
                });

            modelBuilder.Entity("DataAccess.DbEntities.AssignLeaveToEmployee", b =>
                {
                    b.Property<long>("LeaveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<int?>("AssignUnit");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<int>("EmployeeId");

                    b.Property<int>("FinancialYearId");

                    b.Property<bool?>("IsDeleted");

                    b.Property<int>("LeaveReasonId");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Status")
                        .HasMaxLength(50);

                    b.Property<int?>("UsedLeaveUnit");

                    b.HasKey("LeaveId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("FinancialYearId");

                    b.HasIndex("LeaveReasonId");

                    b.HasIndex("ModifiedById");

                    b.ToTable("AssignLeaveToEmployee");
                });

            modelBuilder.Entity("DataAccess.DbEntities.BudgetLineType", b =>
                {
                    b.Property<int>("BudgetLineTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("BudgetLineTypeName")
                        .HasMaxLength(50);

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("BudgetLineTypeId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("BudgetLineType");
                });

            modelBuilder.Entity("DataAccess.DbEntities.BudgetReceivable", b =>
                {
                    b.Property<long>("BudgetReceivalbeId")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Amount");

                    b.Property<long>("BudgetLineId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<DateTime>("ExpectedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<long?>("ProjectId");

                    b.HasKey("BudgetReceivalbeId");

                    b.HasIndex("BudgetLineId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ProjectId");

                    b.ToTable("BudgetReceivable");
                });

            modelBuilder.Entity("DataAccess.DbEntities.BudgetReceivedAmount", b =>
                {
                    b.Property<long>("BudgetReceivedAmountId")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Amount");

                    b.Property<long>("BudgetReceivalbeId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<long>("ReceiptId");

                    b.Property<DateTime>("ReceivedDate");

                    b.Property<string>("Remark");

                    b.HasKey("BudgetReceivedAmountId");

                    b.HasIndex("BudgetReceivalbeId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("BudgetReceivedAmount");
                });

            modelBuilder.Entity("DataAccess.DbEntities.CategoryPopulator", b =>
                {
                    b.Property<int>("CategoryPopulatorId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccountTypeId");

                    b.Property<string>("ChartOfAccountCodeNew");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("SubCategoryLabel");

                    b.Property<int>("ValueSource");

                    b.HasKey("CategoryPopulatorId");

                    b.HasIndex("AccountTypeId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("CategoryPopulator");
                });

            modelBuilder.Entity("DataAccess.DbEntities.CodeType", b =>
                {
                    b.Property<int>("CodeTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("CodeTypeName");

                    b.HasKey("CodeTypeId");

                    b.ToTable("CodeType");

                    b.HasData(
                        new { CodeTypeId = 1, CodeTypeName = "Organizations" },
                        new { CodeTypeId = 2, CodeTypeName = "Suppliers" },
                        new { CodeTypeId = 3, CodeTypeName = "Repair Shops" },
                        new { CodeTypeId = 4, CodeTypeName = "Individual/Others" },
                        new { CodeTypeId = 5, CodeTypeName = "Locations/Stores" }
                    );
                });

            modelBuilder.Entity("DataAccess.DbEntities.ContractTypeContent", b =>
                {
                    b.Property<int>("ContractTypeContentId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ContentDari");

                    b.Property<string>("ContentEnglish");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int>("EmployeeContractTypeId");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int>("OfficeId");

                    b.HasKey("ContractTypeContentId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EmployeeContractTypeId");

                    b.HasIndex("ModifiedById");

                    b.ToTable("ContractTypeContent");
                });

            modelBuilder.Entity("DataAccess.DbEntities.CountryDetails", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("CountryName")
                        .HasMaxLength(50);

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("CountryId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("CountryDetails");

                    b.HasData(
                        new { CountryId = 1, CountryName = "Afghanistan", IsDeleted = false },
                        new { CountryId = 2, CountryName = "United States", IsDeleted = false }
                    );
                });

            modelBuilder.Entity("DataAccess.DbEntities.CurrencyDetails", b =>
                {
                    b.Property<int>("CurrencyId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CurrencyCode")
                        .HasMaxLength(5);

                    b.Property<string>("CurrencyName")
                        .HasMaxLength(50);

                    b.Property<float?>("CurrencyRate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<bool?>("SalaryTaxFlag");

                    b.Property<bool?>("Status");

                    b.HasKey("CurrencyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("CurrencyDetails");

                    b.HasData(
                        new { CurrencyId = 1, CurrencyCode = "AFG", CurrencyName = "Afghanistan", IsDeleted = false, SalaryTaxFlag = true, Status = false },
                        new { CurrencyId = 2, CurrencyCode = "EUR", CurrencyName = "European Curency", IsDeleted = false, SalaryTaxFlag = false, Status = false },
                        new { CurrencyId = 3, CurrencyCode = "PKR", CurrencyName = "Pakistani Rupees", IsDeleted = false, SalaryTaxFlag = false, Status = true },
                        new { CurrencyId = 4, CurrencyCode = "USD", CurrencyName = "US Dollars", IsDeleted = false, SalaryTaxFlag = false, Status = false }
                    );
                });

            modelBuilder.Entity("DataAccess.DbEntities.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("DepartmentName");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("OfficeCode");

                    b.Property<int?>("OfficeId");

                    b.HasKey("DepartmentId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("OfficeId");

                    b.ToTable("Department");

                    b.HasData(
                        new { DepartmentId = 1, DepartmentName = "Administration", IsDeleted = false, OfficeId = 1 }
                    );
                });

            modelBuilder.Entity("DataAccess.DbEntities.DesignationDetail", b =>
                {
                    b.Property<int>("DesignationId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Designation")
                        .HasMaxLength(100);

                    b.Property<string>("DesignationDari");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("DesignationId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("DesignationDetail");
                });

            modelBuilder.Entity("DataAccess.DbEntities.DistrictDetail", b =>
                {
                    b.Property<long>("DistrictID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("District")
                        .HasMaxLength(50);

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int?>("ProvinceID");

                    b.HasKey("DistrictID");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("DistrictDetail");

                    b.HasData(
                        new { DistrictID = 1L, District = "Jawand", IsDeleted = false, ProvinceID = 1 },
                        new { DistrictID = 2L, District = "Muqur", IsDeleted = false, ProvinceID = 1 },
                        new { DistrictID = 3L, District = "Qadis", IsDeleted = false, ProvinceID = 1 },
                        new { DistrictID = 4L, District = "Baghlani Jadid", IsDeleted = false, ProvinceID = 2 },
                        new { DistrictID = 5L, District = "Dahana i Ghuri", IsDeleted = false, ProvinceID = 2 },
                        new { DistrictID = 6L, District = "Chahar Bolak", IsDeleted = false, ProvinceID = 3 },
                        new { DistrictID = 7L, District = "Chahar Kint", IsDeleted = false, ProvinceID = 3 },
                        new { DistrictID = 8L, District = "Panjab", IsDeleted = false, ProvinceID = 4 },
                        new { DistrictID = 9L, District = "Shibar", IsDeleted = false, ProvinceID = 4 },
                        new { DistrictID = 10L, District = "Bamyan", IsDeleted = false, ProvinceID = 4 },
                        new { DistrictID = 11L, District = "Gizab", IsDeleted = false, ProvinceID = 5 },
                        new { DistrictID = 12L, District = "Bala Buluk", IsDeleted = false, ProvinceID = 6 },
                        new { DistrictID = 13L, District = "Bakwa", IsDeleted = false, ProvinceID = 6 },
                        new { DistrictID = 14L, District = "Andkhoy", IsDeleted = false, ProvinceID = 7 },
                        new { DistrictID = 15L, District = "Almar", IsDeleted = false, ProvinceID = 7 },
                        new { DistrictID = 16L, District = "Bilchiragh", IsDeleted = false, ProvinceID = 7 },
                        new { DistrictID = 17L, District = "Ajristan", IsDeleted = false, ProvinceID = 8 },
                        new { DistrictID = 18L, District = "Andar", IsDeleted = false, ProvinceID = 8 },
                        new { DistrictID = 19L, District = "Shahrak", IsDeleted = false, ProvinceID = 9 },
                        new { DistrictID = 20L, District = "Tulak", IsDeleted = false, ProvinceID = 9 },
                        new { DistrictID = 21L, District = "Baghran", IsDeleted = false, ProvinceID = 10 },
                        new { DistrictID = 22L, District = "Garmsir", IsDeleted = false, ProvinceID = 10 },
                        new { DistrictID = 23L, District = "Chishti Sharif", IsDeleted = false, ProvinceID = 11 },
                        new { DistrictID = 24L, District = "Aqcha", IsDeleted = false, ProvinceID = 12 },
                        new { DistrictID = 25L, District = "Fayzabad", IsDeleted = false, ProvinceID = 12 },
                        new { DistrictID = 26L, District = "GuzDarzabara", IsDeleted = false, ProvinceID = 12 },
                        new { DistrictID = 27L, District = "Chahar Asyab", IsDeleted = false, ProvinceID = 13 },
                        new { DistrictID = 28L, District = "Deh Sabz", IsDeleted = false, ProvinceID = 13 },
                        new { DistrictID = 29L, District = "Bagrami", IsDeleted = false, ProvinceID = 13 },
                        new { DistrictID = 30L, District = "Daman", IsDeleted = false, ProvinceID = 14 },
                        new { DistrictID = 31L, District = "Ghorak", IsDeleted = false, ProvinceID = 14 },
                        new { DistrictID = 32L, District = "Alasay", IsDeleted = false, ProvinceID = 15 },
                        new { DistrictID = 33L, District = "Bak", IsDeleted = false, ProvinceID = 16 },
                        new { DistrictID = 34L, District = "Gurbuz", IsDeleted = false, ProvinceID = 16 },
                        new { DistrictID = 35L, District = "Asadabad", IsDeleted = false, ProvinceID = 17 },
                        new { DistrictID = 36L, District = "Bar Kunar", IsDeleted = false, ProvinceID = 17 },
                        new { DistrictID = 37L, District = "Ali Abad", IsDeleted = false, ProvinceID = 18 },
                        new { DistrictID = 38L, District = "Archi", IsDeleted = false, ProvinceID = 18 },
                        new { DistrictID = 39L, District = "Alingar", IsDeleted = false, ProvinceID = 19 },
                        new { DistrictID = 40L, District = "Alishing", IsDeleted = false, ProvinceID = 19 },
                        new { DistrictID = 41L, District = "Baraki Barak", IsDeleted = false, ProvinceID = 20 },
                        new { DistrictID = 42L, District = "Charkh", IsDeleted = false, ProvinceID = 20 },
                        new { DistrictID = 43L, District = "Maidan Wardak", IsDeleted = false, ProvinceID = 21 },
                        new { DistrictID = 44L, District = "Achin", IsDeleted = false, ProvinceID = 22 },
                        new { DistrictID = 45L, District = "Bati Kot", IsDeleted = false, ProvinceID = 22 },
                        new { DistrictID = 46L, District = "Kang", IsDeleted = false, ProvinceID = 23 },
                        new { DistrictID = 47L, District = "Chakhansur", IsDeleted = false, ProvinceID = 23 },
                        new { DistrictID = 48L, District = "Kamdesh", IsDeleted = false, ProvinceID = 24 },
                        new { DistrictID = 49L, District = "Mandol", IsDeleted = false, ProvinceID = 24 },
                        new { DistrictID = 50L, District = "Gardez", IsDeleted = false, ProvinceID = 25 },
                        new { DistrictID = 51L, District = "Jaji", IsDeleted = false, ProvinceID = 25 },
                        new { DistrictID = 52L, District = "Zurmat", IsDeleted = false, ProvinceID = 25 },
                        new { DistrictID = 53L, District = "Wuza Zadran", IsDeleted = false, ProvinceID = 25 },
                        new { DistrictID = 54L, District = "Dila", IsDeleted = false, ProvinceID = 26 },
                        new { DistrictID = 55L, District = "Barmal", IsDeleted = false, ProvinceID = 26 },
                        new { DistrictID = 56L, District = "Kal", IsDeleted = false, ProvinceID = 26 },
                        new { DistrictID = 57L, District = "Chang", IsDeleted = false, ProvinceID = 26 },
                        new { DistrictID = 58L, District = "Anaba", IsDeleted = false, ProvinceID = 27 },
                        new { DistrictID = 59L, District = "Bagram", IsDeleted = false, ProvinceID = 28 },
                        new { DistrictID = 60L, District = "Chaharikar", IsDeleted = false, ProvinceID = 28 },
                        new { DistrictID = 61L, District = "Jabal Saraj", IsDeleted = false, ProvinceID = 28 },
                        new { DistrictID = 62L, District = "Kohi Safi", IsDeleted = false, ProvinceID = 28 },
                        new { DistrictID = 63L, District = "Salang", IsDeleted = false, ProvinceID = 28 },
                        new { DistrictID = 64L, District = "Aybak", IsDeleted = false, ProvinceID = 29 },
                        new { DistrictID = 65L, District = "Balkhab", IsDeleted = false, ProvinceID = 30 },
                        new { DistrictID = 66L, District = "Bangi", IsDeleted = false, ProvinceID = 31 },
                        new { DistrictID = 67L, District = "Uakhar", IsDeleted = false, ProvinceID = 32 },
                        new { DistrictID = 68L, District = "Argahandab", IsDeleted = false, ProvinceID = 33 },
                        new { DistrictID = 69L, District = "Atghar", IsDeleted = false, ProvinceID = 33 },
                        new { DistrictID = 70L, District = "Alabama", IsDeleted = false, ProvinceID = 34 },
                        new { DistrictID = 71L, District = "Arizona", IsDeleted = false, ProvinceID = 35 },
                        new { DistrictID = 72L, District = "Jurors", IsDeleted = false, ProvinceID = 35 },
                        new { DistrictID = 73L, District = "Arona", IsDeleted = false, ProvinceID = 35 },
                        new { DistrictID = 74L, District = "Arkansas", IsDeleted = false, ProvinceID = 36 },
                        new { DistrictID = 75L, District = "California", IsDeleted = false, ProvinceID = 37 },
                        new { DistrictID = 76L, District = "Califor", IsDeleted = false, ProvinceID = 37 },
                        new { DistrictID = 77L, District = "Colorado", IsDeleted = false, ProvinceID = 38 },
                        new { DistrictID = 78L, District = "Connecticut", IsDeleted = false, ProvinceID = 39 },
                        new { DistrictID = 79L, District = "Aelaware", IsDeleted = false, ProvinceID = 40 },
                        new { DistrictID = 80L, District = "Florida", IsDeleted = false, ProvinceID = 41 },
                        new { DistrictID = 81L, District = "Georia", IsDeleted = false, ProvinceID = 42 },
                        new { DistrictID = 82L, District = "Hawaii", IsDeleted = false, ProvinceID = 43 },
                        new { DistrictID = 83L, District = "Idaho", IsDeleted = false, ProvinceID = 44 },
                        new { DistrictID = 84L, District = "Illinois", IsDeleted = false, ProvinceID = 45 },
                        new { DistrictID = 85L, District = "Indiana", IsDeleted = false, ProvinceID = 46 },
                        new { DistrictID = 86L, District = "Undia", IsDeleted = false, ProvinceID = 46 },
                        new { DistrictID = 87L, District = "Iowa", IsDeleted = false, ProvinceID = 47 },
                        new { DistrictID = 88L, District = "Lansa", IsDeleted = false, ProvinceID = 48 },
                        new { DistrictID = 89L, District = "Kentucky", IsDeleted = false, ProvinceID = 49 },
                        new { DistrictID = 90L, District = "Louisiana", IsDeleted = false, ProvinceID = 50 },
                        new { DistrictID = 91L, District = "Maine", IsDeleted = false, ProvinceID = 51 },
                        new { DistrictID = 92L, District = "Maryland", IsDeleted = false, ProvinceID = 52 },
                        new { DistrictID = 93L, District = "Massachusetts", IsDeleted = false, ProvinceID = 53 },
                        new { DistrictID = 94L, District = "Michigan", IsDeleted = false, ProvinceID = 54 },
                        new { DistrictID = 95L, District = "Minnesota", IsDeleted = false, ProvinceID = 55 },
                        new { DistrictID = 96L, District = "Mississippi", IsDeleted = false, ProvinceID = 56 },
                        new { DistrictID = 97L, District = "Missouri", IsDeleted = false, ProvinceID = 57 },
                        new { DistrictID = 98L, District = "Montana", IsDeleted = false, ProvinceID = 58 },
                        new { DistrictID = 99L, District = "Nebraska", IsDeleted = false, ProvinceID = 59 },
                        new { DistrictID = 100L, District = "Yevada", IsDeleted = false, ProvinceID = 60 },
                        new { DistrictID = 101L, District = "New Hampshire", IsDeleted = false, ProvinceID = 61 },
                        new { DistrictID = 102L, District = "New Jersey", IsDeleted = false, ProvinceID = 62 },
                        new { DistrictID = 103L, District = "New Mexico", IsDeleted = false, ProvinceID = 63 },
                        new { DistrictID = 104L, District = "New York", IsDeleted = false, ProvinceID = 64 },
                        new { DistrictID = 105L, District = "North Carolina", IsDeleted = false, ProvinceID = 65 },
                        new { DistrictID = 106L, District = "North Dakota", IsDeleted = false, ProvinceID = 66 },
                        new { DistrictID = 107L, District = "Ohio", IsDeleted = false, ProvinceID = 67 },
                        new { DistrictID = 108L, District = "Oklahoma", IsDeleted = false, ProvinceID = 68 },
                        new { DistrictID = 109L, District = "Tregon", IsDeleted = false, ProvinceID = 69 },
                        new { DistrictID = 110L, District = "Pennsylvania", IsDeleted = false, ProvinceID = 70 },
                        new { DistrictID = 111L, District = "Rhode Island", IsDeleted = false, ProvinceID = 71 },
                        new { DistrictID = 112L, District = "South Carolina", IsDeleted = false, ProvinceID = 72 },
                        new { DistrictID = 113L, District = "South Dakota", IsDeleted = false, ProvinceID = 73 },
                        new { DistrictID = 114L, District = "Tennessee", IsDeleted = false, ProvinceID = 74 },
                        new { DistrictID = 115L, District = "Texas", IsDeleted = false, ProvinceID = 75 },
                        new { DistrictID = 116L, District = "Wtaha", IsDeleted = false, ProvinceID = 76 },
                        new { DistrictID = 117L, District = "Oermont", IsDeleted = false, ProvinceID = 77 },
                        new { DistrictID = 118L, District = "Virginia", IsDeleted = false, ProvinceID = 78 },
                        new { DistrictID = 119L, District = "Washinn", IsDeleted = false, ProvinceID = 79 },
                        new { DistrictID = 120L, District = "West Virginia", IsDeleted = false, ProvinceID = 80 },
                        new { DistrictID = 121L, District = "Nouit Vinia", IsDeleted = false, ProvinceID = 80 },
                        new { DistrictID = 122L, District = "Wisconsin", IsDeleted = false, ProvinceID = 81 },
                        new { DistrictID = 123L, District = "Wyoming", IsDeleted = false, ProvinceID = 82 }
                    );
                });

            modelBuilder.Entity("DataAccess.DbEntities.DonorDetail", b =>
                {
                    b.Property<long>("DonorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("ContactDesignation");

                    b.Property<string>("ContactPerson");

                    b.Property<string>("ContactPersonCell");

                    b.Property<string>("ContactPersonEmail");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name");

                    b.HasKey("DonorId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("DonorDetail");
                });

            modelBuilder.Entity("DataAccess.DbEntities.EmailSettingDetail", b =>
                {
                    b.Property<long>("EmailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("EmailTypeId");

                    b.Property<bool?>("EnableSSL");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("SenderEmail")
                        .HasMaxLength(100);

                    b.Property<string>("SenderPassword")
                        .HasMaxLength(100);

                    b.Property<int>("SmtpPort");

                    b.Property<string>("SmtpServer")
                        .HasMaxLength(100);

                    b.HasKey("EmailId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EmailTypeId");

                    b.HasIndex("ModifiedById");

                    b.ToTable("EmailSettingDetail");
                });

            modelBuilder.Entity("DataAccess.DbEntities.EmailType", b =>
                {
                    b.Property<int>("EmailTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("EmailTypeName")
                        .HasMaxLength(100);

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("EmailTypeId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("EmailType");

                    b.HasData(
                        new { EmailTypeId = 1, EmailTypeName = "General", IsDeleted = false },
                        new { EmailTypeId = 2, EmailTypeName = "Bidding Panel", IsDeleted = false }
                    );
                });

            modelBuilder.Entity("DataAccess.DbEntities.EmployeeAnalyticalDetail", b =>
                {
                    b.Property<int>("AnalyticalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("AccountCode")
                        .HasMaxLength(10);

                    b.Property<string>("Area")
                        .HasMaxLength(10);

                    b.Property<string>("CostBook")
                        .HasMaxLength(10);

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Donor")
                        .HasMaxLength(10);

                    b.Property<int>("EmployeeID");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("Job")
                        .HasMaxLength(10);

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Program")
                        .HasMaxLength(10);

                    b.Property<string>("Project")
                        .HasMaxLength(10);

                    b.Property<float?>("SalaryPercentage");

                    b.Property<string>("Sector")
                        .HasMaxLength(10);

                    b.HasKey("AnalyticalID");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("EmployeeAnalyticalDetail");
                });

            modelBuilder.Entity("DataAccess.DbEntities.EmployeeApplyLeave", b =>
                {
                    b.Property<long>("ApplyLeaveId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ApplyLeaveStatusId")
                        .HasMaxLength(30);

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("EmployeeId");

                    b.Property<int?>("FinancialYearId");

                    b.Property<DateTime>("FromDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<int>("LeaveReasonId");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Remarks");

                    b.Property<DateTime>("ToDate");

                    b.HasKey("ApplyLeaveId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("FinancialYearId");

                    b.HasIndex("LeaveReasonId");

                    b.HasIndex("ModifiedById");

                    b.ToTable("EmployeeApplyLeave");
                });

            modelBuilder.Entity("DataAccess.DbEntities.EmployeeAppraisalDetails", b =>
                {
                    b.Property<int>("EmployeeAppraisalDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<int>("AppraisalPeriod");

                    b.Property<bool>("AppraisalStatus");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<DateTime>("CurrentAppraisalDate");

                    b.Property<string>("Department");

                    b.Property<string>("DutyStation");

                    b.Property<string>("EmployeeCode");

                    b.Property<int>("EmployeeId");

                    b.Property<string>("EmployeeName");

                    b.Property<string>("FatherName");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int>("OfficeId");

                    b.Property<string>("Position");

                    b.Property<string>("Qualification");

                    b.Property<DateTime>("RecruitmentDate");

                    b.Property<int?>("TotalScore");

                    b.HasKey("EmployeeAppraisalDetailsId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ModifiedById");

                    b.ToTable("EmployeeAppraisalDetails");
                });

            modelBuilder.Entity("DataAccess.DbEntities.EmployeeAppraisalQuestions", b =>
                {
                    b.Property<int>("EmployeeAppraisalQuestionsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<int>("AppraisalGeneralQuestionsId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<DateTime>("CurrentAppraisalDate");

                    b.Property<int>("EmployeeId");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Remarks");

                    b.Property<int?>("Score");

                    b.HasKey("EmployeeAppraisalQuestionsId");

                    b.HasIndex("AppraisalGeneralQuestionsId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("EmployeeAppraisalQuestions");
                });

            modelBuilder.Entity("DataAccess.DbEntities.EmployeeAppraisalTeamMember", b =>
                {
                    b.Property<int>("EmployeeAppraisalTeamMemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int>("EmployeeAppraisalDetailsId");

                    b.Property<int>("EmployeeId");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("EmployeeAppraisalTeamMemberId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("EmployeeAppraisalTeamMember");
                });

            modelBuilder.Entity("DataAccess.DbEntities.EmployeeAttendance", b =>
                {
                    b.Property<long>("AttendanceId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AttendanceTypeId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<DateTime>("Date");

                    b.Property<int>("EmployeeId");

                    b.Property<int?>("FinancialYearId");

                    b.Property<long?>("HolidayId");

                    b.Property<int?>("HoverTimeHours");

                    b.Property<DateTime?>("InTime");

                    b.Property<bool?>("IsDeleted");

                    b.Property<int?>("LeaveReasonId");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<DateTime?>("OutTime");

                    b.Property<string>("Remarks");

                    b.Property<string>("TotalWorkTime");

                    b.HasKey("AttendanceId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("FinancialYearId");

                    b.HasIndex("HolidayId");

                    b.HasIndex("LeaveReasonId");

                    b.HasIndex("ModifiedById");

                    b.ToTable("EmployeeAttendance");
                });

            modelBuilder.Entity("DataAccess.DbEntities.EmployeeContract", b =>
                {
                    b.Property<int>("EmployeeContractId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<long?>("BudgetLine");

                    b.Property<string>("BudgetLineDari");

                    b.Property<DateTime?>("ContractEndDate");

                    b.Property<float?>("ContractNumber");

                    b.Property<float?>("ContractPeriod");

                    b.Property<DateTime?>("ContractStartDate");

                    b.Property<string>("ContractStatus");

                    b.Property<int?>("Country");

                    b.Property<string>("CountryDari");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("Designation");

                    b.Property<string>("DesignationDari");

                    b.Property<int?>("DurationOfContract");

                    b.Property<int?>("DutyStation");

                    b.Property<string>("DutyStationDari");

                    b.Property<string>("EmployeeCode");

                    b.Property<int>("EmployeeId");

                    b.Property<string>("EmployeeNameDari");

                    b.Property<string>("FatherName");

                    b.Property<string>("FatherNameDari");

                    b.Property<int?>("Grade");

                    b.Property<string>("GradeDari");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("Job");

                    b.Property<string>("JobDari");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("PeriodType");

                    b.Property<int?>("Project");

                    b.Property<string>("ProjectNameDari");

                    b.Property<int?>("Province");

                    b.Property<string>("ProvinceDari");

                    b.Property<double?>("Salary");

                    b.Property<int?>("WorkDayHours");

                    b.Property<int?>("WorkTime");

                    b.HasKey("EmployeeContractId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("Grade");

                    b.HasIndex("ModifiedById");

                    b.ToTable("EmployeeContract");
                });

            modelBuilder.Entity("DataAccess.DbEntities.EmployeeContractType", b =>
                {
                    b.Property<int>("EmployeeContractTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("EmployeeContractTypeName");

                    b.HasKey("EmployeeContractTypeId");

                    b.ToTable("EmployeeContractType");

                    b.HasData(
                        new { EmployeeContractTypeId = 1, EmployeeContractTypeName = "Probationary" },
                        new { EmployeeContractTypeId = 2, EmployeeContractTypeName = "PartTime" },
                        new { EmployeeContractTypeId = 3, EmployeeContractTypeName = "Permanent" }
                    );
                });

            modelBuilder.Entity("DataAccess.DbEntities.EmployeeDetail", b =>
                {
                    b.Property<int>("EmployeeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<int?>("Age");

                    b.Property<string>("BirthPlace");

                    b.Property<string>("City");

                    b.Property<string>("CloseRelativeList");

                    b.Property<string>("Country");

                    b.Property<int?>("CountryId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CurrentAddress");

                    b.Property<DateTime?>("DateOfBirth");

                    b.Property<string>("District");

                    b.Property<string>("DocumentGUID");

                    b.Property<int?>("DocumentType");

                    b.Property<string>("EducationList");

                    b.Property<string>("Email");

                    b.Property<string>("EmployeeCode");

                    b.Property<string>("EmployeeName");

                    b.Property<string>("EmployeePhoto");

                    b.Property<int?>("EmployeeTypeId");

                    b.Property<string>("Experience");

                    b.Property<int?>("ExperienceMonth");

                    b.Property<int?>("ExperienceYear");

                    b.Property<string>("Extension");

                    b.Property<string>("FatherName");

                    b.Property<string>("Fax");

                    b.Property<string>("Grade");

                    b.Property<int?>("GradeId");

                    b.Property<int?>("HigherQualificationId");

                    b.Property<string>("IDCard");

                    b.Property<string>("InternationalEmploymentList");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("IssuePlace");

                    b.Property<string>("Language");

                    b.Property<string>("MaritalStatus");

                    b.Property<int?>("MaritalStatusId");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("NationalEmploymentList");

                    b.Property<string>("Nationality");

                    b.Property<int?>("NationalityId");

                    b.Property<int?>("NoOfChildren");

                    b.Property<string>("OtherSkillList");

                    b.Property<string>("Passport");

                    b.Property<string>("PassportNo");

                    b.Property<string>("PermanentAddress");

                    b.Property<string>("Phone");

                    b.Property<string>("PlaceOfBirth");

                    b.Property<string>("PreviousWork");

                    b.Property<string>("Profession");

                    b.Property<long?>("ProjectId");

                    b.Property<string>("Province");

                    b.Property<int?>("ProvinceId");

                    b.Property<string>("Qualification");

                    b.Property<string>("ReferBy");

                    b.Property<string>("RefereeList");

                    b.Property<string>("RegCode");

                    b.Property<string>("Remarks");

                    b.Property<string>("Resume");

                    b.Property<string>("Sex");

                    b.Property<int?>("SexId");

                    b.Property<string>("SpeakLanguageList");

                    b.Property<string>("University");

                    b.HasKey("EmployeeID");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EmployeeTypeId");

                    b.HasIndex("HigherQualificationId");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("NationalityId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("EmployeeDetail");
                });

            modelBuilder.Entity("DataAccess.DbEntities.EmployeeDocumentDetail", b =>
                {
                    b.Property<int>("DocumentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<DateTime?>("DocumentDate");

                    b.Property<string>("DocumentFilePath");

                    b.Property<string>("DocumentGUID");

                    b.Property<string>("DocumentName")
                        .HasMaxLength(100);

                    b.Property<int?>("DocumentType");

                    b.Property<int?>("EmployeeID");

                    b.Property<string>("Extension");

                    b.Property<byte[]>("FilePath");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("DocumentID");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("ModifiedById");

                    b.ToTable("EmployeeDocumentDetail");
                });

            modelBuilder.Entity("DataAccess.DbEntities.EmployeeEducations", b =>
                {
                    b.Property<int>("EmployeeEducationsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Degree");

                    b.Property<DateTime?>("EducationFrom");

                    b.Property<DateTime?>("EducationTo");

                    b.Property<int?>("EmployeeID");

                    b.Property<string>("FieldOfStudy");

                    b.Property<string>("Institute");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("EmployeeEducationsId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("ModifiedById");

                    b.ToTable("EmployeeEducations");
                });

            modelBuilder.Entity("DataAccess.DbEntities.EmployeeEvaluation", b =>
                {
                    b.Property<int>("EmployeeEvaluationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("AppraisalTeamMember1");

                    b.Property<string>("AppraisalTeamMember2");

                    b.Property<string>("CommentsByEmployee");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<DateTime>("CurrentAppraisalDate");

                    b.Property<int>("DirectSupervisor");

                    b.Property<int>("EmployeeAppraisalDetailsId");

                    b.Property<int>("EmployeeId");

                    b.Property<string>("EvaluationStatus");

                    b.Property<string>("FinalResultQues1");

                    b.Property<string>("FinalResultQues2");

                    b.Property<string>("FinalResultQues3");

                    b.Property<string>("FinalResultQues4");

                    b.Property<string>("FinalResultQues5");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("EmployeeEvaluationId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("EmployeeEvaluation");
                });

            modelBuilder.Entity("DataAccess.DbEntities.EmployeeEvaluationTraining", b =>
                {
                    b.Property<int>("EmployeeEvaluationTrainingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("CatchLevel");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int>("EmployeeAppraisalDetailsId");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("OthRecommendation");

                    b.Property<string>("Participated");

                    b.Property<string>("Program");

                    b.Property<string>("RefresherTrm");

                    b.Property<string>("TrainingProgram");

                    b.HasKey("EmployeeEvaluationTrainingId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("EmployeeEvaluationTraining");
                });

            modelBuilder.Entity("DataAccess.DbEntities.EmployeeHealthInfo", b =>
                {
                    b.Property<long>("EmployeeHealthInfoId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BloodGroup");

                    b.Property<float?>("BloodPressure");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("EmployeeId");

                    b.Property<string>("Hbs");

                    b.Property<string>("Hcv");

                    b.Property<string>("HealthPresentCondition");

                    b.Property<float?>("HearingL");

                    b.Property<string>("HearingLType");

                    b.Property<float?>("HearingR");

                    b.Property<string>("HearingRType");

                    b.Property<float?>("Height");

                    b.Property<string>("HistoryOfPastIllness");

                    b.Property<string>("HospitalAddress");

                    b.Property<string>("HospitalName");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("OverallHealthCondition");

                    b.Property<string>("PhysicanName");

                    b.Property<string>("ResultOfChestXRay");

                    b.Property<float?>("VisualWithGlassesL");

                    b.Property<float?>("VisualWithGlassesR");

                    b.Property<float?>("VisualWithoutGlassesL");

                    b.Property<float?>("VisualWithoutGlassesR");

                    b.Property<float?>("Weight");

                    b.HasKey("EmployeeHealthInfoId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ModifiedById");

                    b.ToTable("EmployeeHealthInfo");
                });

            modelBuilder.Entity("DataAccess.DbEntities.EmployeeHealthQuestion", b =>
                {
                    b.Property<int>("EmployeeHealthQuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("Answer");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int>("EmployeeId");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Question");

                    b.HasKey("EmployeeHealthQuestionId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("EmployeeHealthQuestion");
                });

            modelBuilder.Entity("DataAccess.DbEntities.EmployeeHistoryDetail", b =>
                {
                    b.Property<long>("HistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<int?>("EmployeeID");

                    b.Property<DateTime?>("HistoryDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("HistoryID");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("ModifiedById");

                    b.ToTable("EmployeeHistoryDetail");
                });

            modelBuilder.Entity("DataAccess.DbEntities.EmployeeHistoryOutsideCountry", b =>
                {
                    b.Property<int>("EmployeeHistoryOutsideCountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("EmployeeID");

                    b.Property<DateTime?>("EmploymentFrom");

                    b.Property<DateTime?>("EmploymentTo");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("MonthlySalary");

                    b.Property<string>("Organization");

                    b.Property<string>("Position");

                    b.Property<string>("ReasonForLeaving");

                    b.HasKey("EmployeeHistoryOutsideCountryId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("ModifiedById");

                    b.ToTable("EmployeeHistoryOutsideCountry");
                });

            modelBuilder.Entity("DataAccess.DbEntities.EmployeeHistoryOutsideOrganization", b =>
                {
                    b.Property<int>("EmployeeHistoryOutsideOrganizationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("EmployeeID");

                    b.Property<DateTime?>("EmploymentFrom");

                    b.Property<DateTime?>("EmploymentTo");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("MonthlySalary");

                    b.Property<string>("Organization");

                    b.Property<string>("Position");

                    b.Property<string>("ReasonForLeaving");

                    b.HasKey("EmployeeHistoryOutsideOrganizationId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("ModifiedById");

                    b.ToTable("EmployeeHistoryOutsideOrganization");
                });

            modelBuilder.Entity("DataAccess.DbEntities.EmployeeInfoReferences", b =>
                {
                    b.Property<int>("EmployeeInfoReferencesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Email");

                    b.Property<int>("EmployeeID");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name");

                    b.Property<string>("Organization");

                    b.Property<long>("PhoneNo");

                    b.Property<string>("Position");

                    b.Property<string>("Relationship");

                    b.HasKey("EmployeeInfoReferencesId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("ModifiedById");

                    b.ToTable("EmployeeInfoReferences");
                });

            modelBuilder.Entity("DataAccess.DbEntities.EmployeeLanguages", b =>
                {
                    b.Property<int>("SpeakLanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int>("EmployeeId");

                    b.Property<bool?>("IsDeleted");

                    b.Property<int>("LanguageId");

                    b.Property<int>("Listening");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int>("Reading");

                    b.Property<int>("Speaking");

                    b.Property<int>("Writing");

                    b.HasKey("SpeakLanguageId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ModifiedById");

                    b.ToTable("EmployeeLanguages");
                });

            modelBuilder.Entity("DataAccess.DbEntities.EmployeeMonthlyAttendance", b =>
                {
                    b.Property<int>("MonthlyAttendanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<int?>("AbsentHours");

                    b.Property<double>("AdvanceAmount");

                    b.Property<int?>("AdvanceId");

                    b.Property<double>("AdvanceRecoveryAmount");

                    b.Property<int?>("AttendanceHours");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("CurrencyId");

                    b.Property<int?>("DeputationHours");

                    b.Property<int?>("EmployeeId");

                    b.Property<double?>("GrossSalary");

                    b.Property<double?>("HourlyRate");

                    b.Property<bool>("IsAdvanceApproved");

                    b.Property<bool>("IsAdvanceRecovery");

                    b.Property<bool>("IsApproved");

                    b.Property<bool?>("IsDeleted");

                    b.Property<int?>("LeaveHours");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int?>("Month");

                    b.Property<double?>("NetSalary");

                    b.Property<int?>("OfficeId");

                    b.Property<int?>("OvertimeHours");

                    b.Property<int?>("PaymentType");

                    b.Property<double?>("PensionAmount");

                    b.Property<double?>("PensionRate");

                    b.Property<double?>("SalaryTax");

                    b.Property<bool?>("Sent");

                    b.Property<bool?>("Status");

                    b.Property<double?>("TotalAllowance");

                    b.Property<double?>("TotalDeduction");

                    b.Property<int?>("TotalDuration");

                    b.Property<double?>("TotalGeneralAmount");

                    b.Property<int?>("Year");

                    b.HasKey("MonthlyAttendanceId");

                    b.HasIndex("AdvanceId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ModifiedById");

                    b.ToTable("EmployeeMonthlyAttendance");
                });

            modelBuilder.Entity("DataAccess.DbEntities.EmployeeMonthlyPayroll", b =>
                {
                    b.Property<long>("MonthlyPayrollId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<int>("CurrencyId");

                    b.Property<DateTime>("Date");

                    b.Property<int>("EmployeeID");

                    b.Property<double>("MonthlyAmount");

                    b.Property<int>("SalaryHeadId");

                    b.HasKey("MonthlyPayrollId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("SalaryHeadId");

                    b.ToTable("EmployeeMonthlyPayroll");
                });

            modelBuilder.Entity("DataAccess.DbEntities.EmployeeOtherSkills", b =>
                {
                    b.Property<int>("EmployeeOtherSkillsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("AbilityLevel");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int>("EmployeeID");

                    b.Property<string>("Experience");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Remarks");

                    b.Property<string>("TypeOfSkill");

                    b.HasKey("EmployeeOtherSkillsId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("ModifiedById");

                    b.ToTable("EmployeeOtherSkills");
                });

            modelBuilder.Entity("DataAccess.DbEntities.EmployeePaymentTypes", b =>
                {
                    b.Property<int>("EmployeePaymentTypesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<int?>("Absent");

                    b.Property<int?>("AbsentDays");

                    b.Property<double?>("AdvanceAmount");

                    b.Property<int?>("AdvanceId");

                    b.Property<double?>("AdvanceRecoveryAmount");

                    b.Property<int?>("Attendance");

                    b.Property<float?>("BasicPay");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CurrencyCode");

                    b.Property<int?>("CurrencyId");

                    b.Property<int?>("EmployeeID");

                    b.Property<string>("EmployeeName");

                    b.Property<DateTime?>("FinancialYearDate");

                    b.Property<double?>("GrossSalary");

                    b.Property<double?>("HourlyRate");

                    b.Property<bool?>("IsAdvanceApproved");

                    b.Property<bool?>("IsAdvanceRecovery");

                    b.Property<bool?>("IsApproved");

                    b.Property<bool?>("IsDeleted");

                    b.Property<int?>("LeaveDays");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<double?>("NetSalary");

                    b.Property<string>("OfficeCode");

                    b.Property<int?>("OfficeId");

                    b.Property<double?>("OverTimeHours");

                    b.Property<DateTime?>("PaymentDate");

                    b.Property<int?>("PaymentType");

                    b.Property<int?>("PayrollMonth");

                    b.Property<int?>("PayrollYear");

                    b.Property<double?>("PensionAmount");

                    b.Property<double?>("PensionRate");

                    b.Property<int?>("PresentDays");

                    b.Property<double?>("SalaryTax");

                    b.Property<double?>("TotalAllowance");

                    b.Property<double?>("TotalDeduction");

                    b.Property<int?>("TotalDuration");

                    b.Property<double?>("TotalGeneralAmount");

                    b.Property<int?>("TotalWorkHours");

                    b.Property<int?>("WorkingDays");

                    b.HasKey("EmployeePaymentTypesId");

                    b.HasIndex("AdvanceId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("ModifiedById");

                    b.ToTable("EmployeePaymentTypes");
                });

            modelBuilder.Entity("DataAccess.DbEntities.EmployeePayroll", b =>
                {
                    b.Property<long>("PayrollId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<long?>("AccountNo");

                    b.Property<int?>("AllowDeductionFlag");

                    b.Property<double?>("BasicPay");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CurrencyCode");

                    b.Property<int?>("CurrencyId");

                    b.Property<int>("EmployeeID");

                    b.Property<int?>("HeadTypeId");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<double?>("MonthlyAmount");

                    b.Property<int?>("PaymentType");

                    b.Property<double?>("PensionRate");

                    b.Property<int?>("SalaryHeadId");

                    b.Property<int?>("TransactionTypeId");

                    b.HasKey("PayrollId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("SalaryHeadId");

                    b.ToTable("EmployeePayroll");
                });

            modelBuilder.Entity("DataAccess.DbEntities.EmployeePayrollAccountHead", b =>
                {
                    b.Property<int>("EmployeePayrollAccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<long?>("AccountNo");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<int>("EmployeeId");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int>("PayrollHeadId");

                    b.Property<string>("PayrollHeadName");

                    b.Property<int>("PayrollHeadTypeId");

                    b.Property<int?>("TransactionTypeId");

                    b.HasKey("EmployeePayrollAccountId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("PayrollHeadId");

                    b.ToTable("EmployeePayrollAccountHead");
                });

            modelBuilder.Entity("DataAccess.DbEntities.EmployeePayrollDetailTest", b =>
                {
                    b.Property<int>("PayrollId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<int?>("Absent");

                    b.Property<float?>("AdvanceDeduction");

                    b.Property<int?>("Attendance");

                    b.Property<float?>("CapacityBuildingDeductibles");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("EmployeeId");

                    b.Property<float?>("FineDeduction");

                    b.Property<float?>("FoodAllowance");

                    b.Property<bool?>("IsDeleted");

                    b.Property<float?>("Medical");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<float?>("Other1");

                    b.Property<float?>("Other2");

                    b.Property<float?>("OtherAllowance");

                    b.Property<float?>("OtherDeduction");

                    b.Property<float?>("PensionDeduction");

                    b.Property<float?>("SalaryTaxDeduction");

                    b.Property<float?>("SecurityDeduction");

                    b.Property<bool?>("Sent");

                    b.Property<bool?>("Status");

                    b.Property<float?>("TRAllowance");

                    b.Property<double?>("TotalAllowance");

                    b.Property<double?>("TotalDeduction");

                    b.Property<int?>("TotalDuration");

                    b.Property<double?>("basicpay");

                    b.Property<string>("currencycode");

                    b.Property<int?>("payrollmonth");

                    b.Property<int?>("payrollyear");

                    b.Property<string>("regcode");

                    b.HasKey("PayrollId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("EmployeePayrollDetailTest");
                });

            modelBuilder.Entity("DataAccess.DbEntities.EmployeePayrollForMonth", b =>
                {
                    b.Property<int>("EmployeePaymentTypesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<int>("AbsentDays");

                    b.Property<double>("AdvanceAmount");

                    b.Property<double>("AdvanceRecoveryAmount");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int>("CurrencyId");

                    b.Property<int>("EmployeeID");

                    b.Property<string>("EmployeeName");

                    b.Property<DateTime>("FinancialYearDate");

                    b.Property<double?>("GrossSalary");

                    b.Property<double?>("HourlyRate");

                    b.Property<bool>("IsAdvanceApproved");

                    b.Property<bool>("IsAdvanceRecovery");

                    b.Property<bool>("IsApproved");

                    b.Property<bool?>("IsDeleted");

                    b.Property<int>("LeaveDays");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<double?>("NetSalary");

                    b.Property<int>("OfficeId");

                    b.Property<double?>("OverTimeHours");

                    b.Property<int>("PaymentType");

                    b.Property<double?>("PensionAmount");

                    b.Property<double?>("PensionRate");

                    b.Property<int>("PresentDays");

                    b.Property<double?>("SalaryTax");

                    b.Property<double?>("TotalAllowance");

                    b.Property<double?>("TotalDeduction");

                    b.Property<double?>("TotalGeneralAmount");

                    b.Property<int>("TotalWorkHours");

                    b.Property<int>("WorkingDays");

                    b.HasKey("EmployeePaymentTypesId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("ModifiedById");

                    b.ToTable("EmployeePayrollForMonth");
                });

            modelBuilder.Entity("DataAccess.DbEntities.EmployeePayrollMonth", b =>
                {
                    b.Property<long>("MonthlyPayrollId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<long?>("AccountNo");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int>("CurrencyId");

                    b.Property<DateTime>("Date");

                    b.Property<int>("EmployeeID");

                    b.Property<int?>("HeadTypeId");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<double>("MonthlyAmount");

                    b.Property<int?>("PaymentType");

                    b.Property<int>("SalaryHeadId");

                    b.Property<int?>("TransactionTypeId");

                    b.HasKey("MonthlyPayrollId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("SalaryHeadId");

                    b.ToTable("EmployeePayrollMonth");
                });

            modelBuilder.Entity("DataAccess.DbEntities.EmployeePensionRate", b =>
                {
                    b.Property<int>("EmployeePensionRateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int>("FinancialYearId");

                    b.Property<bool>("IsDefault");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<double?>("PensionRate");

                    b.HasKey("EmployeePensionRateId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("FinancialYearId");

                    b.HasIndex("ModifiedById");

                    b.ToTable("EmployeePensionRate");
                });

            modelBuilder.Entity("DataAccess.DbEntities.EmployeeProfessionalDetail", b =>
                {
                    b.Property<long>("EmployeeProfessionalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("ContractStatus");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("DepartmentId");

                    b.Property<string>("Departments");

                    b.Property<string>("Designation");

                    b.Property<int?>("DesignationId");

                    b.Property<int?>("EmployeeContractTypeId");

                    b.Property<int?>("EmployeeId");

                    b.Property<int?>("EmployeeTypeId");

                    b.Property<DateTime?>("FiredOn");

                    b.Property<string>("FiredReason");

                    b.Property<DateTime?>("HiredOn");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("JobDescription");

                    b.Property<string>("MembershipSupportInPoliticalParty");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int?>("OfficeId");

                    b.Property<string>("Profession");

                    b.Property<int?>("ProfessionId");

                    b.Property<long?>("ProjectId");

                    b.Property<string>("RegCode");

                    b.Property<DateTime?>("ResignationOn");

                    b.Property<string>("ResignationReason");

                    b.Property<string>("Status")
                        .HasMaxLength(20);

                    b.Property<string>("TinNumber");

                    b.Property<string>("TrainingBenefits");

                    b.Property<string>("WorkType");

                    b.HasKey("EmployeeProfessionalId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DesignationId");

                    b.HasIndex("EmployeeContractTypeId");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.HasIndex("EmployeeTypeId");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("OfficeId");

                    b.HasIndex("ProfessionId");

                    b.ToTable("EmployeeProfessionalDetail");
                });

            modelBuilder.Entity("DataAccess.DbEntities.EmployeeRelativeInfo", b =>
                {
                    b.Property<int>("EmployeeRelativeInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Email");

                    b.Property<int>("EmployeeID");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name");

                    b.Property<string>("Organization");

                    b.Property<long>("PhoneNo");

                    b.Property<string>("Position");

                    b.Property<string>("Relationship");

                    b.HasKey("EmployeeRelativeInfoId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("ModifiedById");

                    b.ToTable("EmployeeRelativeInfo");
                });

            modelBuilder.Entity("DataAccess.DbEntities.EmployeeSalaryAnalyticalInfo", b =>
                {
                    b.Property<int>("EmployeeSalaryAnalyticalInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<int>("AccountCode");

                    b.Property<long>("BudgetLineId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int>("EmployeeID");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<long>("ProjectId");

                    b.Property<double>("SalaryPercentage");

                    b.HasKey("EmployeeSalaryAnalyticalInfoId");

                    b.HasIndex("BudgetLineId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ProjectId");

                    b.ToTable("EmployeeSalaryAnalyticalInfo");
                });

            modelBuilder.Entity("DataAccess.DbEntities.EmployeeSalaryBudget", b =>
                {
                    b.Property<int>("EmployeeSalaryBudgetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<double>("BudgetDisbursed");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int>("CurrencyId");

                    b.Property<int>("EmployeeID");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<double>("SalaryBudget");

                    b.Property<string>("Year");

                    b.HasKey("EmployeeSalaryBudgetId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("ModifiedById");

                    b.ToTable("EmployeeSalaryBudget");
                });

            modelBuilder.Entity("DataAccess.DbEntities.EmployeeSalaryDetails", b =>
                {
                    b.Property<long>("SalaryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int>("CurrencyId");

                    b.Property<string>("Description");

                    b.Property<int>("EmployeeId");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int>("PaymentType");

                    b.Property<double?>("PensionRate");

                    b.Property<double?>("TotalAllowance");

                    b.Property<double?>("TotalGeneralAmount");

                    b.Property<double?>("Totalduduction");

                    b.HasKey("SalaryId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.HasIndex("ModifiedById");

                    b.ToTable("EmployeeSalaryDetails");
                });

            modelBuilder.Entity("DataAccess.DbEntities.EmployeeSalaryPaymentHistory", b =>
                {
                    b.Property<int>("SalaryPaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int>("EmployeeId");

                    b.Property<bool?>("IsDeleted");

                    b.Property<bool>("IsSalaryReverse");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int>("Month");

                    b.Property<long>("VoucherNo");

                    b.Property<int>("Year");

                    b.HasKey("SalaryPaymentId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("VoucherNo");

                    b.ToTable("EmployeeSalaryPaymentHistory");
                });

            modelBuilder.Entity("DataAccess.DbEntities.EmployeeType", b =>
                {
                    b.Property<int>("EmployeeTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("EmployeeTypeName")
                        .HasMaxLength(50);

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("EmployeeTypeId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("EmployeeType");

                    b.HasData(
                        new { EmployeeTypeId = 1, EmployeeTypeName = "Prospective", IsDeleted = false },
                        new { EmployeeTypeId = 2, EmployeeTypeName = "Active", IsDeleted = false },
                        new { EmployeeTypeId = 3, EmployeeTypeName = "Terminated", IsDeleted = false }
                    );
                });

            modelBuilder.Entity("DataAccess.DbEntities.ErrorLog.Errorlog", b =>
                {
                    b.Property<long>("ExceptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("DataXml");

                    b.Property<string>("FileName");

                    b.Property<bool?>("IsActive");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("ModuleName");

                    b.Property<int?>("Section");

                    b.Property<int?>("Status");

                    b.Property<string>("UserName");

                    b.Property<string>("stackTrace");

                    b.HasKey("ExceptionId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("errorlog");
                });

            modelBuilder.Entity("DataAccess.DbEntities.ExchangeRate", b =>
                {
                    b.Property<long>("ExchangeRateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CurrencyCode");

                    b.Property<DateTime?>("Date");

                    b.Property<int?>("FromCurrency");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("OfficeCode");

                    b.Property<int?>("OfficeId");

                    b.Property<double?>("Rate");

                    b.Property<int?>("ToCurrency");

                    b.HasKey("ExchangeRateId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Date");

                    b.HasIndex("FromCurrency");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("OfficeId");

                    b.HasIndex("ToCurrency");

                    b.ToTable("ExchangeRates");
                });

            modelBuilder.Entity("DataAccess.DbEntities.ExchangeRateDetail", b =>
                {
                    b.Property<int>("ExchangeRateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<DateTime>("Date");

                    b.Property<int>("FromCurrency");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int>("OfficeId");

                    b.Property<decimal>("Rate");

                    b.Property<int>("ToCurrency");

                    b.HasKey("ExchangeRateId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("ExchangeRateDetail");
                });

            modelBuilder.Entity("DataAccess.DbEntities.ExistInterviewDetails", b =>
                {
                    b.Property<int>("ExistInterviewDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("BenefitProgram");

                    b.Property<bool>("Benefits");

                    b.Property<bool>("BetterJobOpportunity");

                    b.Property<bool>("CareerChange");

                    b.Property<string>("CoWorkers");

                    b.Property<string>("ComfortableAppropriately");

                    b.Property<bool>("CompanyInstability");

                    b.Property<bool>("ConflictWithOther");

                    b.Property<bool>("ConflictWithSuoervisors");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("DutiesOfJob");

                    b.Property<string>("EmployeeCode");

                    b.Property<int>("EmployeeID");

                    b.Property<string>("EncouragedCooperation");

                    b.Property<string>("Equipped");

                    b.Property<string>("Explain");

                    b.Property<bool>("FamilyReasons");

                    b.Property<string>("GaveFairTreatment");

                    b.Property<string>("GenderFriendlyEnvironment");

                    b.Property<string>("HadAdequateEquipment");

                    b.Property<string>("HadGoodSynergy");

                    b.Property<string>("HadKnowledgeOfJob");

                    b.Property<string>("HadKnowledgeSupervision");

                    b.Property<bool>("HealthIssue");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("JobOrientation");

                    b.Property<string>("JobWasChallenging");

                    b.Property<string>("MaintainedConsistent");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<bool>("NotChallenged");

                    b.Property<string>("OpportunityAdvancement");

                    b.Property<string>("OverallJobSatisfaction");

                    b.Property<bool>("Pay");

                    b.Property<bool>("PersonalReasons");

                    b.Property<string>("ProvidedDevelopment");

                    b.Property<string>("ProvidedRecognition");

                    b.Property<bool>("Question");

                    b.Property<string>("RecognizedEmployeesContribution");

                    b.Property<bool>("Relocation");

                    b.Property<bool>("ReturnToSchool");

                    b.Property<string>("SalaryTreatment");

                    b.Property<string>("SkillsEffectivelyUsed");

                    b.Property<string>("SufficientResources");

                    b.Property<string>("Supervisors");

                    b.Property<string>("TrainingAndDevelopmentPrograms");

                    b.Property<string>("WasAdequatelyStaffed");

                    b.Property<string>("WasAvailableToDiscuss");

                    b.Property<string>("WasEfficient");

                    b.Property<string>("WasOpenSuggestions");

                    b.Property<string>("WelcomedSuggestions");

                    b.Property<string>("WorkEnvironment");

                    b.Property<string>("WorkLoadReasonable");

                    b.Property<bool>("WorkRelationship");

                    b.Property<string>("WorkingConditions");

                    b.Property<string>("WorkingHours");

                    b.HasKey("ExistInterviewDetailsId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("ModifiedById");

                    b.ToTable("ExistInterviewDetails");
                });

            modelBuilder.Entity("DataAccess.DbEntities.FinancialYearDetail", b =>
                {
                    b.Property<int>("FinancialYearId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<DateTime>("EndDate");

                    b.Property<string>("FinancialYearName")
                        .HasMaxLength(50);

                    b.Property<bool>("IsDefault");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("FinancialYearId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("FinancialYearDetail");

                    b.HasData(
                        new { FinancialYearId = 1, EndDate = new DateTime(2019, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified), FinancialYearName = "2019 Financial Year", IsDefault = true, IsDeleted = false, StartDate = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) }
                    );
                });

            modelBuilder.Entity("DataAccess.DbEntities.GainLossSelectedAccounts", b =>
                {
                    b.Property<int>("GainLossSelectedAccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<long>("ChartOfAccountNewId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("GainLossSelectedAccountId");

                    b.HasIndex("ChartOfAccountNewId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("GainLossSelectedAccounts");
                });

            modelBuilder.Entity("DataAccess.DbEntities.HolidayDetails", b =>
                {
                    b.Property<long>("HolidayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<DateTime>("Date");

                    b.Property<int?>("FinancialYearId");

                    b.Property<string>("HolidayName")
                        .HasMaxLength(50);

                    b.Property<int?>("HolidayType");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int?>("OfficeId");

                    b.Property<string>("Remarks");

                    b.HasKey("HolidayId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("FinancialYearId");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("OfficeId");

                    b.ToTable("HolidayDetails");
                });

            modelBuilder.Entity("DataAccess.DbEntities.HolidayWeeklyDetails", b =>
                {
                    b.Property<int>("HolidayWeeklyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Day")
                        .HasMaxLength(30);

                    b.Property<int>("FinancialYearId");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int>("OfficeId");

                    b.HasKey("HolidayWeeklyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("FinancialYearId");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("OfficeId");

                    b.ToTable("HolidayWeeklyDetails");
                });

            modelBuilder.Entity("DataAccess.DbEntities.HRJobInterviewers", b =>
                {
                    b.Property<long>("HRJobInterviewerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int>("EmployeeId");

                    b.Property<int>("InterviewDetailsId");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("HRJobInterviewerId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("InterviewDetailsId");

                    b.HasIndex("ModifiedById");

                    b.ToTable("HRJobInterviewers");
                });

            modelBuilder.Entity("DataAccess.DbEntities.InterviewDetails", b =>
                {
                    b.Property<int>("InterviewDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<long>("CurrentBase");

                    b.Property<bool>("CurrentMeal");

                    b.Property<long>("CurrentOther");

                    b.Property<bool>("CurrentTransportation");

                    b.Property<int>("EmployeeID");

                    b.Property<long>("ExpectationBase");

                    b.Property<bool>("ExpectationMeal");

                    b.Property<long>("ExpectationOther");

                    b.Property<bool>("ExpectationTransportation");

                    b.Property<string>("Experience");

                    b.Property<string>("InterviewStatus");

                    b.Property<string>("Interviewer1");

                    b.Property<string>("Interviewer2");

                    b.Property<string>("Interviewer3");

                    b.Property<string>("Interviewer4");

                    b.Property<bool?>("IsDeleted");

                    b.Property<long>("JobId");

                    b.Property<DateTime>("JoiningDate");

                    b.Property<string>("MaritalStatus");

                    b.Property<string>("MarksObtained");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("NoticePeriod");

                    b.Property<string>("PassportNo");

                    b.Property<string>("PlaceOfBirth");

                    b.Property<string>("PreferedLocation");

                    b.Property<string>("ProfessionalCriteriaMarks");

                    b.Property<string>("Ques1");

                    b.Property<string>("Ques2");

                    b.Property<string>("Ques3");

                    b.Property<string>("Status");

                    b.Property<string>("TazkiraIssuePlace");

                    b.Property<string>("TotalMarksObtained");

                    b.Property<string>("University");

                    b.Property<string>("WrittenTestMarks");

                    b.HasKey("InterviewDetailsId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("ModifiedById");

                    b.ToTable("InterviewDetails");
                });

            modelBuilder.Entity("DataAccess.DbEntities.InterviewLanguages", b =>
                {
                    b.Property<int>("InterviewLanguagesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int>("InterviewDetailsId");

                    b.Property<bool?>("IsDeleted");

                    b.Property<int?>("LanguageId");

                    b.Property<string>("LanguageName");

                    b.Property<int?>("Listening");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int?>("Reading");

                    b.Property<int?>("Speaking");

                    b.Property<int?>("Writing");

                    b.HasKey("InterviewLanguagesId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("InterviewDetailsId");

                    b.HasIndex("ModifiedById");

                    b.ToTable("InterviewLanguages");
                });

            modelBuilder.Entity("DataAccess.DbEntities.InterviewScheduleDetails", b =>
                {
                    b.Property<long>("ScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<bool?>("Approval1");

                    b.Property<bool?>("Approval2");

                    b.Property<bool?>("Approval3");

                    b.Property<bool?>("Approval4");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<DateTime>("Date");

                    b.Property<int>("EmployeeId");

                    b.Property<int?>("GradeId");

                    b.Property<int?>("InterviewStatus")
                        .HasMaxLength(50);

                    b.Property<bool?>("IsDeleted");

                    b.Property<long>("JobId");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("ScheduleId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("GradeId");

                    b.HasIndex("JobId");

                    b.HasIndex("ModifiedById");

                    b.ToTable("InterviewScheduleDetails");
                });

            modelBuilder.Entity("DataAccess.DbEntities.InterviewTechnicalQuestion", b =>
                {
                    b.Property<int>("InterviewTechnicalQuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("Answer");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int>("InterviewDetailsId");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Question");

                    b.HasKey("InterviewTechnicalQuestionId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("InterviewDetailsId");

                    b.HasIndex("ModifiedById");

                    b.ToTable("InterviewTechnicalQuestion");
                });

            modelBuilder.Entity("DataAccess.DbEntities.InterviewTechnicalQuestions", b =>
                {
                    b.Property<int>("InterviewTechnicalQuestionsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int>("OfficeId");

                    b.Property<string>("Question");

                    b.HasKey("InterviewTechnicalQuestionsId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("InterviewTechnicalQuestions");
                });

            modelBuilder.Entity("DataAccess.DbEntities.InterviewTrainings", b =>
                {
                    b.Property<int>("InterviewTrainingsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<DateTime>("EndDate");

                    b.Property<int>("InterviewDetailsId");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("StudyingCountry");

                    b.Property<string>("TrainingName");

                    b.Property<int>("TraininigType");

                    b.HasKey("InterviewTrainingsId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("InterviewDetailsId");

                    b.HasIndex("ModifiedById");

                    b.ToTable("InterviewTrainings");
                });

            modelBuilder.Entity("DataAccess.DbEntities.ItemSpecificationDetails", b =>
                {
                    b.Property<int>("ItemSpecificationDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ItemId");

                    b.Property<int>("ItemSpecificationMasterId");

                    b.Property<string>("ItemSpecificationValue");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("ItemSpecificationDetailsId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ItemSpecificationMasterId");

                    b.HasIndex("ModifiedById");

                    b.ToTable("ItemSpecificationDetails");
                });

            modelBuilder.Entity("DataAccess.DbEntities.ItemSpecificationMaster", b =>
                {
                    b.Property<int>("ItemSpecificationMasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ItemSpecificationField");

                    b.Property<int>("ItemTypeId");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int>("OfficeId");

                    b.HasKey("ItemSpecificationMasterId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ItemTypeId");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("OfficeId");

                    b.ToTable("ItemSpecificationMaster");
                });

            modelBuilder.Entity("DataAccess.DbEntities.JobDetails", b =>
                {
                    b.Property<long>("JobId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("ContractId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<DateTime>("EndDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsAgreementApproved");

                    b.Property<bool>("IsApproved");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("JobCode");

                    b.Property<string>("JobName");

                    b.Property<long?>("JobPhaseId");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("JobId");

                    b.HasIndex("ContractId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("JobPhaseId");

                    b.HasIndex("ModifiedById");

                    b.ToTable("JobDetails");
                });

            modelBuilder.Entity("DataAccess.DbEntities.JobGrade", b =>
                {
                    b.Property<int>("GradeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("GradeName");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("GradeId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("JobGrade");
                });

            modelBuilder.Entity("DataAccess.DbEntities.JobHiringDetails", b =>
                {
                    b.Property<long>("JobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("GradeId");

                    b.Property<bool>("IsActive");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("JobCode")
                        .HasMaxLength(50);

                    b.Property<string>("JobDescription");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int>("OfficeId");

                    b.Property<int?>("ProfessionId");

                    b.Property<int>("Unit");

                    b.HasKey("JobId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("GradeId");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("OfficeId");

                    b.ToTable("JobHiringDetails");
                });

            modelBuilder.Entity("DataAccess.DbEntities.JobPhase", b =>
                {
                    b.Property<long>("JobPhaseId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Phase");

                    b.HasKey("JobPhaseId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("JobPhases");
                });

            modelBuilder.Entity("DataAccess.DbEntities.JournalDetail", b =>
                {
                    b.Property<int>("JournalCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("JournalName")
                        .HasMaxLength(100);

                    b.Property<byte?>("JournalType");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("JournalCode");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("JournalDetail");
                });

            modelBuilder.Entity("DataAccess.DbEntities.LanguageDetail", b =>
                {
                    b.Property<int>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("LanguageName");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("LanguageId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("LanguageDetail");

                    b.HasData(
                        new { LanguageId = 1, IsDeleted = false, LanguageName = "Arabic" },
                        new { LanguageId = 2, IsDeleted = false, LanguageName = "Dari" },
                        new { LanguageId = 3, IsDeleted = false, LanguageName = "English" },
                        new { LanguageId = 4, IsDeleted = false, LanguageName = "French" },
                        new { LanguageId = 5, IsDeleted = false, LanguageName = "German" },
                        new { LanguageId = 6, IsDeleted = false, LanguageName = "Pashto" },
                        new { LanguageId = 7, IsDeleted = false, LanguageName = "Russian" },
                        new { LanguageId = 8, IsDeleted = false, LanguageName = "Turkish" },
                        new { LanguageId = 9, IsDeleted = false, LanguageName = "Turkmani" },
                        new { LanguageId = 10, IsDeleted = false, LanguageName = "Urdu" },
                        new { LanguageId = 11, IsDeleted = false, LanguageName = "Uzbek" }
                    );
                });

            modelBuilder.Entity("DataAccess.DbEntities.LeaveReasonDetail", b =>
                {
                    b.Property<int>("LeaveReasonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("ReasonName")
                        .HasMaxLength(50);

                    b.Property<int>("Unit");

                    b.HasKey("LeaveReasonId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("LeaveReasonDetail");

                    b.HasData(
                        new { LeaveReasonId = 1, IsDeleted = false, ReasonName = "Casual Leave", Unit = 12 },
                        new { LeaveReasonId = 2, IsDeleted = false, ReasonName = "Emergency Leave", Unit = 6 },
                        new { LeaveReasonId = 3, IsDeleted = false, ReasonName = "Maternity Leave", Unit = 90 }
                    );
                });

            modelBuilder.Entity("DataAccess.DbEntities.LoggerDetails", b =>
                {
                    b.Property<int>("LoggerDetailsId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<bool>("IsRead");

                    b.Property<string>("LoggedDetail");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int>("NotificationId");

                    b.Property<string>("UserName");

                    b.HasKey("LoggerDetailsId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("LoggerDetails");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Marketing.ActivityType", b =>
                {
                    b.Property<long>("ActivityTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ActivityName");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("ActivityTypeId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("ActivityTypes");

                    b.HasData(
                        new { ActivityTypeId = 1L, ActivityName = "Broadcasting", IsDeleted = false },
                        new { ActivityTypeId = 2L, ActivityName = "Production", IsDeleted = false }
                    );
                });

            modelBuilder.Entity("DataAccess.DbEntities.Marketing.Category", b =>
                {
                    b.Property<long>("CategoryId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CategoryName");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("CategoryId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Marketing.Channel", b =>
                {
                    b.Property<long>("ChannelId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ChannelName");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<long?>("MediumId");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("ChannelId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("MediumId");

                    b.HasIndex("ModifiedById");

                    b.ToTable("Channel");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Marketing.ClientDetails", b =>
                {
                    b.Property<long>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<long?>("CategoryId");

                    b.Property<string>("ClientBackground");

                    b.Property<string>("ClientCode");

                    b.Property<string>("ClientName");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Email");

                    b.Property<string>("FocalPoint");

                    b.Property<string>("History");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Phone");

                    b.Property<string>("PhysicialAddress");

                    b.Property<string>("Position");

                    b.HasKey("ClientId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("ClientDetails");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Marketing.ContractDetails", b =>
                {
                    b.Property<long>("ContractId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("ActivityTypeId");

                    b.Property<long?>("ClientId");

                    b.Property<string>("ClientName");

                    b.Property<string>("ContractCode");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("CurrencyId");

                    b.Property<DateTime>("EndDate");

                    b.Property<bool>("IsApproved");

                    b.Property<bool>("IsCompleted");

                    b.Property<bool>("IsDeclined");

                    b.Property<bool?>("IsDeleted");

                    b.Property<int?>("LanguageDetailLanguageId");

                    b.Property<long?>("LanguageId");

                    b.Property<long?>("MediaCategoryId");

                    b.Property<long?>("MediumId");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<long?>("NatureId");

                    b.Property<long?>("QualityId");

                    b.Property<DateTime>("StartDate");

                    b.Property<long?>("TimeCategoryId");

                    b.Property<double>("UnitRate");

                    b.Property<long?>("UnitRateId");

                    b.HasKey("ContractId");

                    b.HasIndex("ActivityTypeId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("LanguageDetailLanguageId");

                    b.HasIndex("MediaCategoryId");

                    b.HasIndex("MediumId");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("NatureId");

                    b.HasIndex("QualityId");

                    b.HasIndex("TimeCategoryId");

                    b.HasIndex("UnitRateId");

                    b.ToTable("ContractDetails");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Marketing.JobPriceDetails", b =>
                {
                    b.Property<long>("JobPriceId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<double>("Discount");

                    b.Property<float>("DiscountPercent");

                    b.Property<double>("FinalPrice");

                    b.Property<double>("FinalRate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<bool>("IsInvoiceApproved");

                    b.Property<long>("JobId");

                    b.Property<long>("Minutes");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<double>("TotalPrice");

                    b.Property<double>("UnitRate");

                    b.Property<int>("Units");

                    b.HasKey("JobPriceId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("JobId");

                    b.HasIndex("ModifiedById");

                    b.ToTable("JobPriceDetails");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Marketing.Language", b =>
                {
                    b.Property<long>("LanguageId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("LanguageName");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("LanguageId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Marketing.MediaCategory", b =>
                {
                    b.Property<long>("MediaCategoryId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CategoryName");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("MediaCategoryId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("MediaCategories");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Marketing.Medium", b =>
                {
                    b.Property<long>("MediumId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("MediumName");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("MediumId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("Mediums");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Marketing.Nature", b =>
                {
                    b.Property<long>("NatureId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("NatureName");

                    b.HasKey("NatureId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("Natures");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Marketing.PolicyDaySchedule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool>("Friday");

                    b.Property<bool>("IsActive");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<bool>("Monday");

                    b.Property<long?>("PolicyId");

                    b.Property<bool>("Saturday");

                    b.Property<bool>("Sunday");

                    b.Property<bool>("Thursday");

                    b.Property<bool>("Tuesday");

                    b.Property<bool>("Wednesday");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("PolicyId");

                    b.ToTable("PolicyDaySchedules");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Marketing.PolicyDetail", b =>
                {
                    b.Property<long>("PolicyId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<DateTime>("EndDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool?>("IsDeleted");

                    b.Property<long?>("LanguageId");

                    b.Property<int?>("LanguagesLanguageId");

                    b.Property<long?>("MediaCategoryId");

                    b.Property<long?>("MediumId");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("PolicyCode");

                    b.Property<string>("PolicyName");

                    b.Property<long?>("ProducerId");

                    b.Property<string>("RepeatDays");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("PolicyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LanguagesLanguageId");

                    b.HasIndex("MediaCategoryId");

                    b.HasIndex("MediumId");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ProducerId");

                    b.ToTable("PolicyDetails");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Marketing.PolicyOrderSchedule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<DateTime>("EndDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<long?>("PolicyId");

                    b.Property<bool>("RequestSchedule");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("PolicyId");

                    b.ToTable("PolicyOrderSchedules");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Marketing.PolicySchedule", b =>
                {
                    b.Property<long>("PolicyScheduleId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ByDay");

                    b.Property<int?>("ByMonth");

                    b.Property<int?>("ByWeek");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<DateTime>("EndDate");

                    b.Property<TimeSpan>("EndTime");

                    b.Property<int?>("Frequency");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<long?>("PolicyId");

                    b.Property<string>("RepeatDays");

                    b.Property<string>("ScheduleCode");

                    b.Property<DateTime>("StartDate");

                    b.Property<TimeSpan>("StartTime");

                    b.Property<string>("Title");

                    b.Property<bool>("isActive");

                    b.Property<bool>("isDeleted");

                    b.HasKey("PolicyScheduleId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("PolicyId");

                    b.ToTable("PolicySchedules");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Marketing.PolicyTimeSchedule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<TimeSpan>("EndTime");

                    b.Property<bool>("IsActive");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<long?>("PolicyId");

                    b.Property<TimeSpan>("StartTime");

                    b.Property<string>("TimeScheduleCode");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("PolicyId");

                    b.ToTable("PolicyTimeSchedules");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Marketing.Producer", b =>
                {
                    b.Property<long>("ProducerId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("ProducerName");

                    b.HasKey("ProducerId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("Producers");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Marketing.Quality", b =>
                {
                    b.Property<long>("QualityId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("QualityName");

                    b.HasKey("QualityId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("Qualities");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Marketing.ScheduleDetails", b =>
                {
                    b.Property<long>("ScheduleId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("ChannelId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<DateTime>("EndDate");

                    b.Property<TimeSpan>("EndTime");

                    b.Property<bool>("Friday");

                    b.Property<bool>("IsActive");

                    b.Property<bool?>("IsDeleted");

                    b.Property<long?>("JobId");

                    b.Property<long?>("MediumId");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<bool>("Monday");

                    b.Property<long?>("PolicyId");

                    b.Property<long?>("ProjectId");

                    b.Property<bool>("Saturday");

                    b.Property<string>("ScheduleCode");

                    b.Property<string>("ScheduleName");

                    b.Property<string>("ScheduleType");

                    b.Property<DateTime>("StartDate");

                    b.Property<TimeSpan>("StartTime");

                    b.Property<bool>("Sunday");

                    b.Property<bool>("Thursday");

                    b.Property<bool>("Tuesday");

                    b.Property<bool>("Wednesday");

                    b.HasKey("ScheduleId");

                    b.HasIndex("ChannelId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("JobId");

                    b.HasIndex("MediumId");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("PolicyId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ScheduleDetails");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Marketing.TimeCategory", b =>
                {
                    b.Property<long>("TimeCategoryId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("TimeCategoryName");

                    b.HasKey("TimeCategoryId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("TimeCategories");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Marketing.UnitRate", b =>
                {
                    b.Property<long>("UnitRateId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("ActivityTypeId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("CurrencyDetailsCurrencyId");

                    b.Property<long?>("CurrencyId");

                    b.Property<bool?>("IsDeleted");

                    b.Property<long?>("MediaCategoryId");

                    b.Property<long?>("MediumId");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<long?>("NatureId");

                    b.Property<long?>("QualityId");

                    b.Property<long?>("TimeCategoryId");

                    b.Property<double>("UnitRates");

                    b.HasKey("UnitRateId");

                    b.HasIndex("ActivityTypeId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CurrencyDetailsCurrencyId");

                    b.HasIndex("MediaCategoryId");

                    b.HasIndex("MediumId");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("NatureId");

                    b.HasIndex("QualityId");

                    b.HasIndex("TimeCategoryId");

                    b.ToTable("UnitRates");
                });

            modelBuilder.Entity("DataAccess.DbEntities.NationalityDetails", b =>
                {
                    b.Property<int>("NationalityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("NationalityName")
                        .HasMaxLength(100);

                    b.HasKey("NationalityId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("NationalityDetails");
                });

            modelBuilder.Entity("DataAccess.DbEntities.NotesMaster", b =>
                {
                    b.Property<int>("NoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<int?>("AccountTypeId");

                    b.Property<int>("BlanceType");

                    b.Property<long>("ChartOfAccountNewId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int>("FinancialReportTypeId");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Narration");

                    b.Property<int>("Notes");

                    b.HasKey("NoteId");

                    b.HasIndex("AccountTypeId");

                    b.HasIndex("ChartOfAccountNewId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("NotesMaster");
                });

            modelBuilder.Entity("DataAccess.DbEntities.OfficeDetail", b =>
                {
                    b.Property<int>("OfficeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("FaxNo")
                        .HasMaxLength(50);

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("OfficeCode")
                        .HasMaxLength(5);

                    b.Property<string>("OfficeKey");

                    b.Property<string>("OfficeName")
                        .HasMaxLength(100);

                    b.Property<string>("PhoneNo")
                        .HasMaxLength(50);

                    b.Property<string>("SupervisorName")
                        .HasMaxLength(100);

                    b.HasKey("OfficeId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("OfficeDetail");

                    b.HasData(
                        new { OfficeId = 1, IsDeleted = false, OfficeCode = "A0001", OfficeKey = "AF", OfficeName = "Afghanistan" }
                    );
                });

            modelBuilder.Entity("DataAccess.DbEntities.OnlyForDT.EmployeeDetailDT", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<int>("Age");

                    b.Property<string>("BankAccount")
                        .HasMaxLength(100);

                    b.Property<float?>("BasicPay");

                    b.Property<double?>("CapacityBuildingDeductibles");

                    b.Property<int?>("CasualLeaveAllowance");

                    b.Property<string>("City")
                        .HasMaxLength(50);

                    b.Property<string>("CityDari")
                        .HasMaxLength(50);

                    b.Property<string>("CloseRelativeList");

                    b.Property<string>("Comments");

                    b.Property<DateTime?>("ContractEndDate");

                    b.Property<string>("ContractEndDateDari")
                        .HasMaxLength(50);

                    b.Property<double?>("ContractNumber");

                    b.Property<double?>("ContractPeriod");

                    b.Property<double?>("ContractPeriodDari");

                    b.Property<DateTime?>("ContractStartDate");

                    b.Property<string>("ContractStartDateDari")
                        .HasMaxLength(50);

                    b.Property<string>("ContractStatus")
                        .HasMaxLength(5);

                    b.Property<string>("Country")
                        .HasMaxLength(50);

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CurrencyCode");

                    b.Property<string>("CurrentAddress")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("DateOfBirth");

                    b.Property<string>("Department")
                        .HasMaxLength(50);

                    b.Property<string>("Designation")
                        .HasMaxLength(50);

                    b.Property<string>("DesignationDari")
                        .HasMaxLength(50);

                    b.Property<string>("District")
                        .HasMaxLength(50);

                    b.Property<string>("ETN")
                        .HasMaxLength(10);

                    b.Property<string>("EducationList");

                    b.Property<string>("Email")
                        .HasMaxLength(100);

                    b.Property<int?>("EmergencyLeaveAllowance");

                    b.Property<string>("EmployeeCode");

                    b.Property<string>("EmployeeCodeDari")
                        .HasMaxLength(20);

                    b.Property<string>("EmployeeName")
                        .HasMaxLength(100);

                    b.Property<string>("EmployeeNameDari")
                        .HasMaxLength(100);

                    b.Property<int>("EmployeePhoto");

                    b.Property<string>("Experience")
                        .HasMaxLength(50);

                    b.Property<bool?>("Extended");

                    b.Property<string>("FatherName")
                        .HasMaxLength(100);

                    b.Property<string>("FatherNameDari")
                        .HasMaxLength(100);

                    b.Property<string>("Fax")
                        .HasMaxLength(20);

                    b.Property<string>("FineReason")
                        .HasMaxLength(200);

                    b.Property<double?>("FinesDeductibles");

                    b.Property<DateTime?>("FireOn");

                    b.Property<string>("FireReason")
                        .HasMaxLength(200);

                    b.Property<double?>("FoodAllowance");

                    b.Property<DateTime?>("HireOn");

                    b.Property<string>("IdCard")
                        .HasMaxLength(20);

                    b.Property<string>("InternationalEmploymentList");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("JobDescription");

                    b.Property<string>("Language")
                        .HasMaxLength(30);

                    b.Property<string>("MaritalStatus")
                        .HasMaxLength(15);

                    b.Property<int?>("MaternityLeaveAllowance");

                    b.Property<double?>("MedicalAllowance");

                    b.Property<int?>("MedicalLeaveAllowance");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<double?>("MonthlyBasicPay");

                    b.Property<string>("NationalEmploymentList");

                    b.Property<string>("Nationality")
                        .HasMaxLength(50);

                    b.Property<int?>("NoOfChildren");

                    b.Property<double?>("Other1Allowance");

                    b.Property<string>("Other1Description");

                    b.Property<double?>("Other2Allowance");

                    b.Property<string>("Other2Description");

                    b.Property<double?>("OtherAllowance");

                    b.Property<double?>("OtherDeductibles");

                    b.Property<string>("OtherSkillList");

                    b.Property<string>("Passport")
                        .HasMaxLength(50);

                    b.Property<double?>("PensionDeductibles");

                    b.Property<string>("PeriodType")
                        .HasMaxLength(10);

                    b.Property<string>("PeriodTypeDari")
                        .HasMaxLength(10);

                    b.Property<string>("PermanentAddress")
                        .HasMaxLength(200);

                    b.Property<string>("Phone")
                        .HasMaxLength(20);

                    b.Property<string>("PlaceOfBirth")
                        .HasMaxLength(50);

                    b.Property<string>("PoliticalPartyMembership");

                    b.Property<string>("PreviousExperience")
                        .HasMaxLength(50);

                    b.Property<string>("PreviousWork")
                        .HasMaxLength(50);

                    b.Property<string>("Profession")
                        .HasMaxLength(50);

                    b.Property<long?>("ProjectId");

                    b.Property<string>("Province")
                        .HasMaxLength(50);

                    b.Property<string>("ProvinceDari")
                        .HasMaxLength(50);

                    b.Property<string>("Qualification")
                        .HasMaxLength(50);

                    b.Property<string>("ReferBy")
                        .HasMaxLength(50);

                    b.Property<string>("RefereeList");

                    b.Property<string>("RegCode");

                    b.Property<string>("Remarks");

                    b.Property<DateTime?>("ResignedOn");

                    b.Property<string>("ResignedReason")
                        .HasMaxLength(200);

                    b.Property<string>("SECT")
                        .HasMaxLength(10);

                    b.Property<double?>("SecurityDeductibles");

                    b.Property<string>("SpeakLanguageList");

                    b.Property<string>("TinNo")
                        .HasMaxLength(20);

                    b.Property<DateTime?>("TingenerateDate");

                    b.Property<double?>("TrAllowance");

                    b.Property<string>("Training");

                    b.Property<string>("Village")
                        .HasMaxLength(50);

                    b.Property<string>("WorkType")
                        .HasMaxLength(20);

                    b.Property<string>("grade")
                        .HasMaxLength(10);

                    b.Property<string>("sex")
                        .HasMaxLength(5);

                    b.HasKey("EmployeeId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("EmployeeDetailDT");
                });

            modelBuilder.Entity("DataAccess.DbEntities.OrderSchedulePermission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<bool>("OrderSchedule");

                    b.Property<int>("PageId");

                    b.Property<string>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("PageId");

                    b.ToTable("OrderSchedulePermission");
                });

            modelBuilder.Entity("DataAccess.DbEntities.PayrollAccountHead", b =>
                {
                    b.Property<int>("PayrollHeadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<long?>("AccountNo");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("PayrollHeadName");

                    b.Property<int>("PayrollHeadTypeId");

                    b.Property<int?>("TransactionTypeId");

                    b.HasKey("PayrollHeadId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("PayrollAccountHead");

                    b.HasData(
                        new { PayrollHeadId = 1, IsDeleted = false, PayrollHeadName = "Net Salary", PayrollHeadTypeId = 3, TransactionTypeId = 1 },
                        new { PayrollHeadId = 2, IsDeleted = false, PayrollHeadName = "Advance Deduction", PayrollHeadTypeId = 2, TransactionTypeId = 1 },
                        new { PayrollHeadId = 3, IsDeleted = false, PayrollHeadName = "Salary Tax", PayrollHeadTypeId = 2, TransactionTypeId = 1 },
                        new { PayrollHeadId = 4, IsDeleted = true, PayrollHeadName = "Gross Salary", PayrollHeadTypeId = 3, TransactionTypeId = 2 },
                        new { PayrollHeadId = 5, IsDeleted = false, PayrollHeadName = "Pension", PayrollHeadTypeId = 2, TransactionTypeId = 1 }
                    );
                });

            modelBuilder.Entity("DataAccess.DbEntities.PayrollMonthlyHourDetail", b =>
                {
                    b.Property<int>("PayrollMonthlyHourID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("Hours");

                    b.Property<DateTime?>("InTime");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int>("OfficeId");

                    b.Property<DateTime?>("OutTime");

                    b.Property<int?>("PayrollMonth");

                    b.Property<int?>("PayrollYear");

                    b.Property<int?>("WorkingDay");

                    b.Property<int?>("WorkingTime");

                    b.HasKey("PayrollMonthlyHourID");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("OfficeId");

                    b.ToTable("PayrollMonthlyHourDetail");
                });

            modelBuilder.Entity("DataAccess.DbEntities.PensionPaymentHistory", b =>
                {
                    b.Property<int>("PensionPaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int>("EmployeeId");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<decimal>("PaymentAmount");

                    b.Property<DateTime>("PaymentDate");

                    b.Property<long>("VoucherNo");

                    b.Property<string>("VoucherReferenceNo");

                    b.HasKey("PensionPaymentId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("VoucherNo");

                    b.ToTable("PensionPaymentHistory");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Permissions", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("DataAccess.DbEntities.PermissionsInRoles", b =>
                {
                    b.Property<string>("RoleId");

                    b.Property<string>("PermissionId");

                    b.Property<bool>("CanEdit");

                    b.Property<bool>("CanView");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CurrentPermissionId");

                    b.Property<bool?>("IsDeleted");

                    b.Property<bool>("IsGrant");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int>("ModuleId");

                    b.Property<int?>("PageId");

                    b.Property<int>("PermissionsInRolesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasAlternateKey("PermissionId", "PermissionsInRolesId", "RoleId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("PermissionsInRoles");
                });

            modelBuilder.Entity("DataAccess.DbEntities.ProfessionDetails", b =>
                {
                    b.Property<int>("ProfessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("ProfessionDari");

                    b.Property<string>("ProfessionName")
                        .HasMaxLength(100);

                    b.HasKey("ProfessionId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("ProfessionDetails");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Project.ActivityDocumentsDetail", b =>
                {
                    b.Property<long>("ActtivityDocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("ActivityDocumentsFilePath");

                    b.Property<long>("ActivityId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int?>("StatusId");

                    b.HasKey("ActtivityDocumentId");

                    b.HasIndex("ActivityId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("StatusId");

                    b.ToTable("ActivityDocumentsDetail");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Project.ActivityStatusDetail", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("StatusName");

                    b.HasKey("StatusId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("ActivityStatusDetail");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Project.ApproveProjectDetails", b =>
                {
                    b.Property<long>("ApproveProjrctId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("CommentText");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("FileName");

                    b.Property<string>("FilePath");

                    b.Property<bool?>("IsApproved");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<long>("ProjectId");

                    b.Property<byte[]>("UploadedFile");

                    b.HasKey("ApproveProjrctId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ProjectId");

                    b.ToTable("ApproveProjectDetails");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Project.AreaDetail", b =>
                {
                    b.Property<long>("AreaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("AreaCode");

                    b.Property<string>("AreaName");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("AreaId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("AreaDetail");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Project.CEAgeGroupDetail", b =>
                {
                    b.Property<long>("AgeGroupOtherDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name");

                    b.Property<long>("ProjectId");

                    b.HasKey("AgeGroupOtherDetailId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ProjectId");

                    b.ToTable("CEAgeGroupDetail");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Project.CEAssumptionDetail", b =>
                {
                    b.Property<long>("AssumptionDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name");

                    b.Property<long>("ProjectId");

                    b.HasKey("AssumptionDetailId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ProjectId");

                    b.ToTable("CEAssumptionDetail");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Project.CEFeasibilityExpertOtherDetail", b =>
                {
                    b.Property<long>("ExpertOtherDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name");

                    b.Property<long>("ProjectId");

                    b.HasKey("ExpertOtherDetailId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ProjectId");

                    b.ToTable("CEFeasibilityExpertOtherDetail");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Project.CEOccupationDetail", b =>
                {
                    b.Property<long>("OccupationOtherDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name");

                    b.Property<long>("ProjectId");

                    b.HasKey("OccupationOtherDetailId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ProjectId");

                    b.ToTable("CEOccupationDetail");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Project.DistrictMultiSelect", b =>
                {
                    b.Property<long>("DistrictMultiSelectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<long>("DistrictID");

                    b.Property<long?>("DistrictSelectionId");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<long>("ProjectId");

                    b.Property<int>("ProvinceId");

                    b.HasKey("DistrictMultiSelectId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DistrictID");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("DistrictMultiSelect");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Project.DonorCriteriaDetails", b =>
                {
                    b.Property<long>("DonorCEId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<bool?>("Accountability");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("CriticismPerformance");

                    b.Property<bool?>("DeliverableQuality");

                    b.Property<bool?>("Dispute");

                    b.Property<int?>("DonorFinancingHistory");

                    b.Property<bool?>("EffectiveCommunication");

                    b.Property<bool?>("FundsOnTime");

                    b.Property<bool?>("IsDeleted");

                    b.Property<int?>("MethodOfFunding");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<bool?>("MoneyAllocation");

                    b.Property<bool?>("OtherDeliverable");

                    b.Property<string>("OtherDeliverableType");

                    b.Property<bool?>("PastFundingExperience");

                    b.Property<bool?>("PastWorkingExperience");

                    b.Property<int?>("PoliticalStanding");

                    b.Property<bool?>("Professional");

                    b.Property<long>("ProjectId");

                    b.Property<bool?>("ProposalAccepted");

                    b.Property<bool?>("ProposalExperience");

                    b.Property<int?>("ReligiousStanding");

                    b.Property<bool?>("TimeManagement");

                    b.HasKey("DonorCEId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ProjectId");

                    b.ToTable("DonorCriteriaDetail");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Project.DonorEligibilityCriteria", b =>
                {
                    b.Property<long>("DonorEligibilityDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name");

                    b.Property<long>("ProjectId");

                    b.HasKey("DonorEligibilityDetailId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ProjectId");

                    b.ToTable("DonorEligibilityCriteria");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Project.EligibilityCriteriaDetail", b =>
                {
                    b.Property<long>("EligibilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<bool?>("CoPartnership");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("DonorCriteriaMet");

                    b.Property<bool?>("EligibilityDealine");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<long>("ProjectId");

                    b.HasKey("EligibilityId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ProjectId");

                    b.ToTable("EligibilityCriteriaDetail");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Project.FeasibilityCriteriaDetail", b =>
                {
                    b.Property<long>("FeasibilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<bool?>("AnyInKindComponent");

                    b.Property<bool?>("ByEquipment");

                    b.Property<bool?>("CapacityAvailableForProject");

                    b.Property<double?>("CostOfCompensationMoney");

                    b.Property<int?>("CostOfCompensationMonth");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("EnoughTimeForProject");

                    b.Property<bool?>("EnoughTimeToPrepareProposal");

                    b.Property<bool?>("ExpandScope");

                    b.Property<bool?>("FeasibilityExpert");

                    b.Property<bool?>("FeasibleExpertDeploy");

                    b.Property<bool?>("GeoGraphicalPresence");

                    b.Property<bool?>("IsCostGreaterthenBudget");

                    b.Property<bool?>("IsDeleted");

                    b.Property<bool?>("IsFinancialContribution");

                    b.Property<bool?>("IsGeographical");

                    b.Property<bool?>("IsProjectPractical");

                    b.Property<bool?>("IsSeasonal");

                    b.Property<bool?>("IsSecurity");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int?>("PerCostGreaterthenBudget");

                    b.Property<bool?>("PresenceCoverageInProject");

                    b.Property<bool?>("ProjectAllowedBylaw");

                    b.Property<bool?>("ProjectByLeadership");

                    b.Property<long>("ProjectId");

                    b.Property<bool?>("ProjectInLineWithOrgFocus");

                    b.Property<double?>("ProjectRealCost");

                    b.Property<bool?>("ThirdPartyContract");

                    b.Property<bool?>("TrainedStaff");

                    b.Property<bool?>("UseableByOrganisation");

                    b.HasKey("FeasibilityId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ProjectId");

                    b.ToTable("FeasibilityCriteriaDetail");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Project.FinancialCriteriaDetail", b =>
                {
                    b.Property<long>("FinancialCriteriaDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<double?>("Lump_Sum");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<double?>("Operational");

                    b.Property<double?>("Overhead_Admin");

                    b.Property<double?>("ProjectActivities");

                    b.Property<long>("ProjectId");

                    b.Property<double?>("Total");

                    b.HasKey("FinancialCriteriaDetailId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ProjectId");

                    b.ToTable("FinancialCriteriaDetail");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Project.FinancialProjectDetail", b =>
                {
                    b.Property<long>("FinancialProjectDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<long>("ProjectId");

                    b.Property<string>("ProjectName");

                    b.Property<long?>("ProjectSelectionId");

                    b.HasKey("FinancialProjectDetailId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ProjectId");

                    b.ToTable("FinancialProjectDetail");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Project.GenderConsiderationDetail", b =>
                {
                    b.Property<long>("GenderConsiderationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("GenderConsiderationName");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("GenderConsiderationId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("GenderConsiderationDetail");

                    b.HasData(
                        new { GenderConsiderationId = 1L, GenderConsiderationName = "50 % F - 50 % M Excellent", IsDeleted = false },
                        new { GenderConsiderationId = 2L, GenderConsiderationName = "40 % F - 60 % M Very Good", IsDeleted = false },
                        new { GenderConsiderationId = 3L, GenderConsiderationName = "30 % F - 70 % M Good", IsDeleted = false },
                        new { GenderConsiderationId = 4L, GenderConsiderationName = "25 % F - 75 % M Poor", IsDeleted = false },
                        new { GenderConsiderationId = 5L, GenderConsiderationName = "20 % F - 80 % M Poor", IsDeleted = false },
                        new { GenderConsiderationId = 6L, GenderConsiderationName = "10 % F - 90 % M Poor", IsDeleted = false },
                        new { GenderConsiderationId = 7L, GenderConsiderationName = "5 % F - 95 % M Poor", IsDeleted = false },
                        new { GenderConsiderationId = 8L, GenderConsiderationName = "0 % F - 100 % M Poor", IsDeleted = false }
                    );
                });

            modelBuilder.Entity("DataAccess.DbEntities.Project.PriorityCriteriaDetail", b =>
                {
                    b.Property<long>("PriorityCriteriaDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<bool?>("CoverageAreaExpansion");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("ExpansionGoal");

                    b.Property<bool?>("FillingFundingGap");

                    b.Property<bool?>("GoodCause");

                    b.Property<bool?>("ImproveDonorRelationship");

                    b.Property<bool?>("ImprovePerformancecapacity");

                    b.Property<bool?>("IncreaseEligibility");

                    b.Property<bool?>("IncreaseReputation");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<bool?>("NewEquipment");

                    b.Property<bool?>("NewSoftware");

                    b.Property<bool?>("NewTraining");

                    b.Property<long>("ProjectId");

                    b.Property<bool?>("SkillImprove");

                    b.HasKey("PriorityCriteriaDetailId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ProjectId");

                    b.ToTable("PriorityCriteriaDetail");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Project.PriorityOtherDetail", b =>
                {
                    b.Property<long>("PriorityOtherDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name");

                    b.Property<long>("ProjectId");

                    b.HasKey("PriorityOtherDetailId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ProjectId");

                    b.ToTable("PriorityOtherDetail");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Project.ProgramDetail", b =>
                {
                    b.Property<long>("ProgramId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("ProgramCode");

                    b.Property<string>("ProgramName");

                    b.Property<long>("ProjectId");

                    b.HasKey("ProgramId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("ProgramDetail");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Project.ProjectActivityDetail", b =>
                {
                    b.Property<long>("ActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("ActivityDescription");

                    b.Property<string>("ActivityName");

                    b.Property<DateTime?>("ActualEndDate");

                    b.Property<DateTime?>("ActualStartDate");

                    b.Property<long?>("BudgetLineId");

                    b.Property<string>("Comments");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("EmployeeID");

                    b.Property<DateTime?>("EndDate");

                    b.Property<DateTime?>("ExtensionEndDate");

                    b.Property<DateTime?>("ExtensionStartDate");

                    b.Property<string>("ImplementationChalanges");

                    b.Property<string>("ImplementationMethod");

                    b.Property<float?>("ImplementationProgress");

                    b.Property<bool?>("ImplementationStatus");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("MonitoringChallenges");

                    b.Property<int?>("MonitoringFrequency");

                    b.Property<float?>("MonitoringProgress");

                    b.Property<int?>("MonitoringScore");

                    b.Property<bool?>("MonitoringStatus");

                    b.Property<int?>("OfficeId");

                    b.Property<string>("OvercomingChallanges");

                    b.Property<string>("Recommendation");

                    b.Property<int>("RecurrinTypeId");

                    b.Property<bool?>("Recurring");

                    b.Property<int?>("RecurringCount");

                    b.Property<DateTime?>("StartDate");

                    b.Property<int?>("StatusId");

                    b.Property<string>("Strengths");

                    b.Property<string>("VerificationSource");

                    b.Property<string>("Weeknesses");

                    b.HasKey("ActivityId");

                    b.HasIndex("BudgetLineId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("OfficeId");

                    b.HasIndex("StatusId");

                    b.ToTable("ProjectActivityDetail");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Project.ProjectArea", b =>
                {
                    b.Property<long>("ProjectAreaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<long>("AreaId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<long>("ProjectId");

                    b.HasKey("ProjectAreaId");

                    b.HasIndex("AreaId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectArea");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Project.ProjectAssignTo", b =>
                {
                    b.Property<long>("ProjectAssignToId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int>("EmployeeId");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<long>("ProjectId");

                    b.HasKey("ProjectAssignToId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectAssignTo");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Project.ProjectBudgetLineDetail", b =>
                {
                    b.Property<long>("BudgetLineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("BudgetCode");

                    b.Property<string>("BudgetName");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("CurrencyId");

                    b.Property<double?>("InitialBudget");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<long?>("ProjectId");

                    b.Property<long?>("ProjectJobId");

                    b.HasKey("BudgetLineId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ProjectJobId");

                    b.ToTable("ProjectBudgetLineDetail");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Project.ProjectCommunication", b =>
                {
                    b.Property<long>("PCId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("ProjectDescription");

                    b.Property<long>("ProjectId");

                    b.HasKey("PCId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectCommunication");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Project.ProjectCommunicationAttachment", b =>
                {
                    b.Property<long>("PCAId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("FileName");

                    b.Property<string>("FilePath");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<long>("PCId");

                    b.Property<long>("ProjectId");

                    b.HasKey("PCAId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("PCId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectCommunicationAttachment");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Project.ProjectDetail", b =>
                {
                    b.Property<long>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("DirectorId");

                    b.Property<DateTime?>("EndDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool?>("IsCriteriaEvaluationSubmit");

                    b.Property<bool?>("IsDeleted");

                    b.Property<bool?>("IsProposalComplate");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("ProjectCode");

                    b.Property<string>("ProjectDescription");

                    b.Property<string>("ProjectName");

                    b.Property<long?>("ProjectPhaseDetailsId");

                    b.Property<int?>("ReviewerId");

                    b.Property<DateTime?>("StartDate");

                    b.HasKey("ProjectId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ProjectPhaseDetailsId");

                    b.ToTable("ProjectDetail");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Project.ProjectJobDetail", b =>
                {
                    b.Property<long>("ProjectJobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<long>("ProjectId");

                    b.Property<string>("ProjectJobCode");

                    b.Property<string>("ProjectJobName");

                    b.HasKey("ProjectJobId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectJobDetail");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Project.ProjectOtherDetail", b =>
                {
                    b.Property<long>("ProjectOtherDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("CurrencyId");

                    b.Property<string>("DistrictID");

                    b.Property<long?>("DonorId");

                    b.Property<DateTime?>("EndDate");

                    b.Property<long?>("GenderConsiderationId");

                    b.Property<string>("GenderRemarks");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int?>("OfficeId");

                    b.Property<long>("ProjectId");

                    b.Property<string>("ProvinceId");

                    b.Property<DateTime?>("REOIReceiveDate");

                    b.Property<string>("SecurityConsiderationId");

                    b.Property<long?>("SecurityId");

                    b.Property<string>("SecurityRemarks");

                    b.Property<DateTime?>("StartDate");

                    b.Property<long?>("StrengthConsiderationId");

                    b.Property<DateTime?>("SubmissionDate");

                    b.Property<string>("beneficiaryFemale");

                    b.Property<string>("beneficiaryMale");

                    b.Property<string>("budget");

                    b.Property<string>("mainActivities");

                    b.Property<string>("opportunity");

                    b.Property<string>("opportunityNo");

                    b.Property<string>("opportunitydescription");

                    b.Property<string>("projectGoal");

                    b.Property<string>("projectObjective");

                    b.HasKey("ProjectOtherDetailId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectOtherDetail");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Project.ProjectPhaseDetails", b =>
                {
                    b.Property<long>("ProjectPhaseDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("ProjectPhase");

                    b.HasKey("ProjectPhaseDetailsId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("ProjectPhaseDetails");

                    b.HasData(
                        new { ProjectPhaseDetailsId = 1L, IsDeleted = false, ProjectPhase = "Data Entry" }
                    );
                });

            modelBuilder.Entity("DataAccess.DbEntities.Project.ProjectPhaseTime", b =>
                {
                    b.Property<long>("ProjectPhaseTimeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<DateTime?>("PhaseEndDate");

                    b.Property<DateTime?>("PhaseStartData");

                    b.Property<long>("ProjectId");

                    b.Property<long>("ProjectPhaseDetailsId");

                    b.HasKey("ProjectPhaseTimeId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ProjectPhaseDetailsId");

                    b.ToTable("ProjectPhaseTime");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Project.ProjectProgram", b =>
                {
                    b.Property<long>("ProjectProgramId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<long>("ProgramId");

                    b.Property<long>("ProjectId");

                    b.HasKey("ProjectProgramId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ProgramId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectProgram");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Project.ProjectProposalDetail", b =>
                {
                    b.Property<long>("ProjectProposaldetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("BudgetFileExtType");

                    b.Property<string>("BudgetFileId");

                    b.Property<string>("BudgetFileName");

                    b.Property<string>("BudgetFileWebLink");

                    b.Property<string>("ConceptFileExtType");

                    b.Property<string>("ConceptFileId");

                    b.Property<string>("ConceptFileName");

                    b.Property<string>("ConceptFileWebLink");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("CurrencyId");

                    b.Property<string>("EDIFileExtType");

                    b.Property<string>("EDIFileName");

                    b.Property<string>("EDIFileWebLink");

                    b.Property<string>("EdiFileId");

                    b.Property<string>("FolderId");

                    b.Property<string>("FolderName");

                    b.Property<bool?>("IsDeleted");

                    b.Property<bool?>("IsProposalAccept");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("PresentationExtType");

                    b.Property<string>("PresentationFileId");

                    b.Property<string>("PresentationFileName");

                    b.Property<string>("PresentationFileWebLink");

                    b.Property<int?>("ProjectAssignTo");

                    b.Property<long>("ProjectId");

                    b.Property<DateTime?>("ProposalDueDate");

                    b.Property<string>("ProposalExtType");

                    b.Property<string>("ProposalFileId");

                    b.Property<string>("ProposalFileName");

                    b.Property<DateTime?>("ProposalStartDate");

                    b.Property<string>("ProposalWebLink");

                    b.Property<int?>("UserId");

                    b.HasKey("ProjectProposaldetailId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectProposalDetail");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Project.ProjectSector", b =>
                {
                    b.Property<long>("ProjectSectorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<long>("ProjectId");

                    b.Property<long>("SectorId");

                    b.HasKey("ProjectSectorId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SectorId");

                    b.ToTable("ProjectSector");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Project.ProvinceMultiSelect", b =>
                {
                    b.Property<long>("ProvinceMultiSelectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<long>("ProjectId");

                    b.Property<int>("ProvinceId");

                    b.Property<long?>("ProvinceSelectionId");

                    b.HasKey("ProvinceMultiSelectId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("ProvinceMultiSelect");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Project.PurposeofInitiativeCriteria", b =>
                {
                    b.Property<long>("ProductServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<bool?>("Aggriculture");

                    b.Property<bool?>("Awareness");

                    b.Property<bool?>("Children");

                    b.Property<bool?>("CommunityDevelopment");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("Culture");

                    b.Property<bool?>("DRR");

                    b.Property<bool?>("Documentaries");

                    b.Property<bool?>("DrugAbuses");

                    b.Property<bool?>("Education");

                    b.Property<bool?>("HealthAndNutrition");

                    b.Property<bool?>("InvestigativeJournalism");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<bool?>("Music");

                    b.Property<bool?>("News");

                    b.Property<string>("OtherActivity");

                    b.Property<bool?>("Others");

                    b.Property<bool?>("PrintedMedia");

                    b.Property<bool?>("Product");

                    b.Property<long>("ProjectId");

                    b.Property<bool?>("RadioProduction");

                    b.Property<bool?>("Reports");

                    b.Property<bool?>("Right");

                    b.Property<bool?>("RoundTable");

                    b.Property<bool?>("Service");

                    b.Property<bool?>("ServiceEducation");

                    b.Property<bool?>("ServiceHealthAndNutrition");

                    b.Property<bool?>("SocioPolitiacalDebate");

                    b.Property<bool?>("Studies");

                    b.Property<bool?>("TVProgram");

                    b.Property<bool?>("TargetBenificaiaryWomen");

                    b.Property<bool?>("TargetBenificiaryAgeGroup");

                    b.Property<bool?>("TargetBenificiaryMen");

                    b.Property<bool?>("TargetBenificiaryaOccupation");

                    b.Property<bool?>("Women");

                    b.HasKey("ProductServiceId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ProjectId");

                    b.ToTable("PurposeofInitiativeCriteria");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Project.RiskCriteriaDetail", b =>
                {
                    b.Property<long>("RiskCriteriaDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<bool?>("Beneficiaries");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("DeliveryFaiLure");

                    b.Property<bool?>("DesctructionByTerroristActivity");

                    b.Property<bool?>("Ethinc");

                    b.Property<bool?>("Financiallosses");

                    b.Property<bool?>("FocusDivertingrisk");

                    b.Property<bool?>("GovernmentConfiscation");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<bool?>("Opportunityloss");

                    b.Property<string>("OrganizationalDescription");

                    b.Property<bool?>("OtherOrganizationalHarms");

                    b.Property<bool?>("OverallOrganization");

                    b.Property<bool?>("PrematureSeizure");

                    b.Property<bool?>("Probablydelaysinfunding");

                    b.Property<bool?>("ProjectAssets");

                    b.Property<long>("ProjectId");

                    b.Property<string>("ProjectSelection");

                    b.Property<bool?>("Religious");

                    b.Property<bool?>("Reputation");

                    b.Property<bool?>("Sectarian");

                    b.Property<bool?>("Security");

                    b.Property<bool?>("Social");

                    b.Property<bool?>("Staff");

                    b.Property<bool?>("Suppliers");

                    b.Property<bool?>("Traditional");

                    b.HasKey("RiskCriteriaDetailId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ProjectId");

                    b.ToTable("RiskCriteriaDetail");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Project.SectorDetails", b =>
                {
                    b.Property<long>("SectorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("SectorCode");

                    b.Property<string>("SectorName");

                    b.HasKey("SectorId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("SectorDetails");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Project.SecurityConsiderationDetail", b =>
                {
                    b.Property<long>("SecurityConsiderationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("SecurityConsiderationName");

                    b.HasKey("SecurityConsiderationId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("SecurityConsiderationDetail");

                    b.HasData(
                        new { SecurityConsiderationId = 1L, IsDeleted = false, SecurityConsiderationName = "Project Staff Cannot Visit Project Site" },
                        new { SecurityConsiderationId = 2L, IsDeleted = false, SecurityConsiderationName = "Beneficiaries cannot be reached" },
                        new { SecurityConsiderationId = 3L, IsDeleted = false, SecurityConsiderationName = "Resources cannot be deployed" },
                        new { SecurityConsiderationId = 4L, IsDeleted = false, SecurityConsiderationName = "Threat exit for future (Highly)" },
                        new { SecurityConsiderationId = 5L, IsDeleted = false, SecurityConsiderationName = "Project staff access the are partially" },
                        new { SecurityConsiderationId = 6L, IsDeleted = false, SecurityConsiderationName = "Bonfires can be reached partially" },
                        new { SecurityConsiderationId = 7L, IsDeleted = false, SecurityConsiderationName = "Resources can be deployed partially" },
                        new { SecurityConsiderationId = 8L, IsDeleted = false, SecurityConsiderationName = "Future Threats exits" },
                        new { SecurityConsiderationId = 9L, IsDeleted = false, SecurityConsiderationName = "No barrier for staff to access the area" },
                        new { SecurityConsiderationId = 10L, IsDeleted = false, SecurityConsiderationName = "No obstacle for deploying Resources & office" },
                        new { SecurityConsiderationId = 11L, IsDeleted = false, SecurityConsiderationName = "Future Threats expected" }
                    );
                });

            modelBuilder.Entity("DataAccess.DbEntities.Project.SecurityConsiderationMultiSelect", b =>
                {
                    b.Property<long>("SecurityConsiderationMultiSelectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<long>("ProjectId");

                    b.Property<long>("SecurityConsiderationId");

                    b.Property<long?>("SecurityConsiderationSelectedId");

                    b.HasKey("SecurityConsiderationMultiSelectId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SecurityConsiderationId");

                    b.ToTable("SecurityConsiderationMultiSelect");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Project.SecurityDetail", b =>
                {
                    b.Property<long>("SecurityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("SecurityName");

                    b.HasKey("SecurityId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("SecurityDetail");

                    b.HasData(
                        new { SecurityId = 1L, IsDeleted = false, SecurityName = "Insecure" },
                        new { SecurityId = 2L, IsDeleted = false, SecurityName = "Partially Insecure" },
                        new { SecurityId = 3L, IsDeleted = false, SecurityName = "Secure (Green Area)" }
                    );
                });

            modelBuilder.Entity("DataAccess.DbEntities.Project.StrengthConsiderationDetail", b =>
                {
                    b.Property<long>("StrengthConsiderationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("StrengthConsiderationName");

                    b.HasKey("StrengthConsiderationId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("StrengthConsiderationDetail");

                    b.HasData(
                        new { StrengthConsiderationId = 1L, IsDeleted = false, StrengthConsiderationName = "Gender Friendly" },
                        new { StrengthConsiderationId = 2L, IsDeleted = false, StrengthConsiderationName = "Not Gender Friendly" },
                        new { StrengthConsiderationId = 3L, IsDeleted = false, StrengthConsiderationName = "Not Applicable" }
                    );
                });

            modelBuilder.Entity("DataAccess.DbEntities.Project.TargetBeneficiaryDetail", b =>
                {
                    b.Property<long>("TargetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<long>("ProjectId");

                    b.Property<string>("TargetName");

                    b.Property<int>("TargetType");

                    b.HasKey("TargetId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("TargetBeneficiaryDetail");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Project.WinProjectDetails", b =>
                {
                    b.Property<long>("WinProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("CommentText");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("FileName");

                    b.Property<string>("FilePath");

                    b.Property<bool?>("IsDeleted");

                    b.Property<bool?>("IsWin");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<long>("ProjectId");

                    b.Property<byte[]>("UploadedFile");

                    b.HasKey("WinProjectId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ProjectId");

                    b.ToTable("WinProjectDetails");
                });

            modelBuilder.Entity("DataAccess.DbEntities.ProjectBudgetLine", b =>
                {
                    b.Property<long>("BudgetLineId")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("AmountPayable");

                    b.Property<double>("AmountReceivable");

                    b.Property<int?>("BudgetLineTypeId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<DateTime>("EndDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<long>("ProjectId");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("BudgetLineId");

                    b.HasIndex("BudgetLineTypeId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectBudgetLine");
                });

            modelBuilder.Entity("DataAccess.DbEntities.ProjectDetails", b =>
                {
                    b.Property<long>("ProjectId")
                        .ValueGeneratedOnAdd();

                    b.Property<double?>("Budget");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("CurrencyId");

                    b.Property<double?>("CurrentBalance");

                    b.Property<string>("Description");

                    b.Property<DateTime>("EndDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<double?>("PayableAmount");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<double?>("ReceivableAmount");

                    b.Property<DateTime>("StartDate");

                    b.Property<int?>("Status");

                    b.HasKey("ProjectId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("ProjectDetails");
                });

            modelBuilder.Entity("DataAccess.DbEntities.ProvinceDetails", b =>
                {
                    b.Property<int>("ProvinceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<int?>("CountryId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("ProvinceName")
                        .HasMaxLength(50);

                    b.HasKey("ProvinceId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("ProvinceDetails");

                    b.HasData(
                        new { ProvinceId = 1, CountryId = 1, IsDeleted = false, ProvinceName = "Badghis" },
                        new { ProvinceId = 2, CountryId = 1, IsDeleted = false, ProvinceName = "Baghlan" },
                        new { ProvinceId = 3, CountryId = 1, IsDeleted = false, ProvinceName = "Balkh" },
                        new { ProvinceId = 4, CountryId = 1, IsDeleted = false, ProvinceName = "Bamyan" },
                        new { ProvinceId = 5, CountryId = 1, IsDeleted = false, ProvinceName = "Daykundi" },
                        new { ProvinceId = 6, CountryId = 1, IsDeleted = false, ProvinceName = "Farah" },
                        new { ProvinceId = 7, CountryId = 1, IsDeleted = false, ProvinceName = "Faryab" },
                        new { ProvinceId = 8, CountryId = 1, IsDeleted = false, ProvinceName = "Ghazni" },
                        new { ProvinceId = 9, CountryId = 1, IsDeleted = false, ProvinceName = "Ghor" },
                        new { ProvinceId = 10, CountryId = 1, IsDeleted = false, ProvinceName = "Helmand" },
                        new { ProvinceId = 11, CountryId = 1, IsDeleted = false, ProvinceName = "Herat" },
                        new { ProvinceId = 12, CountryId = 1, IsDeleted = false, ProvinceName = "Jowzjan" },
                        new { ProvinceId = 13, CountryId = 1, IsDeleted = false, ProvinceName = "Kabul" },
                        new { ProvinceId = 14, CountryId = 1, IsDeleted = false, ProvinceName = "Kandahar" },
                        new { ProvinceId = 15, CountryId = 1, IsDeleted = false, ProvinceName = "Kapisa" },
                        new { ProvinceId = 16, CountryId = 1, IsDeleted = false, ProvinceName = "Khost" },
                        new { ProvinceId = 17, CountryId = 1, IsDeleted = false, ProvinceName = "Kunar" },
                        new { ProvinceId = 18, CountryId = 1, IsDeleted = false, ProvinceName = "Kunduz" },
                        new { ProvinceId = 19, CountryId = 1, IsDeleted = false, ProvinceName = "Laghman" },
                        new { ProvinceId = 20, CountryId = 1, IsDeleted = false, ProvinceName = "Logar" },
                        new { ProvinceId = 21, CountryId = 1, IsDeleted = false, ProvinceName = "Maidan Wardak" },
                        new { ProvinceId = 22, CountryId = 1, IsDeleted = false, ProvinceName = "Nangarhar" },
                        new { ProvinceId = 23, CountryId = 1, IsDeleted = false, ProvinceName = "Nimruz" },
                        new { ProvinceId = 24, CountryId = 1, IsDeleted = false, ProvinceName = "Nuristan" },
                        new { ProvinceId = 25, CountryId = 1, IsDeleted = false, ProvinceName = "Paktia" },
                        new { ProvinceId = 26, CountryId = 1, IsDeleted = false, ProvinceName = "Paktika" },
                        new { ProvinceId = 27, CountryId = 1, IsDeleted = false, ProvinceName = "Panjshir" },
                        new { ProvinceId = 28, CountryId = 1, IsDeleted = false, ProvinceName = "Parwan" },
                        new { ProvinceId = 29, CountryId = 1, IsDeleted = false, ProvinceName = "Samangan" },
                        new { ProvinceId = 30, CountryId = 1, IsDeleted = false, ProvinceName = "Sar-e Pol" },
                        new { ProvinceId = 31, CountryId = 1, IsDeleted = false, ProvinceName = "Takhar" },
                        new { ProvinceId = 32, CountryId = 1, IsDeleted = false, ProvinceName = "Urozgan" },
                        new { ProvinceId = 33, CountryId = 1, IsDeleted = false, ProvinceName = "Zabul" },
                        new { ProvinceId = 34, CountryId = 1, IsDeleted = false, ProvinceName = "Alabama" },
                        new { ProvinceId = 35, CountryId = 2, IsDeleted = false, ProvinceName = "Alaska" },
                        new { ProvinceId = 36, CountryId = 2, IsDeleted = false, ProvinceName = "Arizona" },
                        new { ProvinceId = 37, CountryId = 2, IsDeleted = false, ProvinceName = "Arkansas" },
                        new { ProvinceId = 38, CountryId = 2, IsDeleted = false, ProvinceName = "California" },
                        new { ProvinceId = 39, CountryId = 2, IsDeleted = false, ProvinceName = "Colorado" },
                        new { ProvinceId = 40, CountryId = 2, IsDeleted = false, ProvinceName = "Connecticut" },
                        new { ProvinceId = 41, CountryId = 2, IsDeleted = false, ProvinceName = "Delaware" },
                        new { ProvinceId = 42, CountryId = 2, IsDeleted = false, ProvinceName = "Florida" },
                        new { ProvinceId = 43, CountryId = 2, IsDeleted = false, ProvinceName = "Georgia" },
                        new { ProvinceId = 44, CountryId = 2, IsDeleted = false, ProvinceName = "Hawaii" },
                        new { ProvinceId = 45, CountryId = 2, IsDeleted = false, ProvinceName = "Idaho" },
                        new { ProvinceId = 46, CountryId = 2, IsDeleted = false, ProvinceName = "Illinois" },
                        new { ProvinceId = 47, CountryId = 2, IsDeleted = false, ProvinceName = "Indiana" },
                        new { ProvinceId = 48, CountryId = 2, IsDeleted = false, ProvinceName = "Iowa" },
                        new { ProvinceId = 49, CountryId = 2, IsDeleted = false, ProvinceName = "Kansas" },
                        new { ProvinceId = 50, CountryId = 2, IsDeleted = false, ProvinceName = "Kentucky" },
                        new { ProvinceId = 51, CountryId = 2, IsDeleted = false, ProvinceName = "Louisiana" },
                        new { ProvinceId = 52, CountryId = 2, IsDeleted = false, ProvinceName = "Maine" },
                        new { ProvinceId = 53, CountryId = 2, IsDeleted = false, ProvinceName = "Maryland" },
                        new { ProvinceId = 54, CountryId = 2, IsDeleted = false, ProvinceName = "Massachusetts" },
                        new { ProvinceId = 55, CountryId = 2, IsDeleted = false, ProvinceName = "Michigan" },
                        new { ProvinceId = 56, CountryId = 2, IsDeleted = false, ProvinceName = "Minnesota" },
                        new { ProvinceId = 57, CountryId = 2, IsDeleted = false, ProvinceName = "Mississippi" },
                        new { ProvinceId = 58, CountryId = 2, IsDeleted = false, ProvinceName = "Missouri" },
                        new { ProvinceId = 59, CountryId = 2, IsDeleted = false, ProvinceName = "Montana" },
                        new { ProvinceId = 60, CountryId = 2, IsDeleted = false, ProvinceName = "Nebraska" },
                        new { ProvinceId = 61, CountryId = 2, IsDeleted = false, ProvinceName = "Nevada" },
                        new { ProvinceId = 62, CountryId = 2, IsDeleted = false, ProvinceName = "New Hampshire" },
                        new { ProvinceId = 63, CountryId = 2, IsDeleted = false, ProvinceName = "New Jersey" },
                        new { ProvinceId = 64, CountryId = 2, IsDeleted = false, ProvinceName = "New Mexico" },
                        new { ProvinceId = 65, CountryId = 2, IsDeleted = false, ProvinceName = "New York" },
                        new { ProvinceId = 66, CountryId = 2, IsDeleted = false, ProvinceName = "North Carolina" },
                        new { ProvinceId = 67, CountryId = 2, IsDeleted = false, ProvinceName = "North Dakota" },
                        new { ProvinceId = 68, CountryId = 2, IsDeleted = false, ProvinceName = "Ohio" },
                        new { ProvinceId = 69, CountryId = 2, IsDeleted = false, ProvinceName = "Oklahoma" },
                        new { ProvinceId = 70, CountryId = 2, IsDeleted = false, ProvinceName = "Oregon" },
                        new { ProvinceId = 71, CountryId = 2, IsDeleted = false, ProvinceName = "Pennsylvania" },
                        new { ProvinceId = 72, CountryId = 2, IsDeleted = false, ProvinceName = "Rhode Island" },
                        new { ProvinceId = 73, CountryId = 2, IsDeleted = false, ProvinceName = "South Carolina" },
                        new { ProvinceId = 74, CountryId = 2, IsDeleted = false, ProvinceName = "South Dakota" },
                        new { ProvinceId = 75, CountryId = 2, IsDeleted = false, ProvinceName = "Tennessee" },
                        new { ProvinceId = 76, CountryId = 2, IsDeleted = false, ProvinceName = "Texas" },
                        new { ProvinceId = 77, CountryId = 2, IsDeleted = false, ProvinceName = "Utah" },
                        new { ProvinceId = 78, CountryId = 2, IsDeleted = false, ProvinceName = "Vermont" },
                        new { ProvinceId = 79, CountryId = 2, IsDeleted = false, ProvinceName = "Virginia" },
                        new { ProvinceId = 80, CountryId = 2, IsDeleted = false, ProvinceName = "Washington" },
                        new { ProvinceId = 81, CountryId = 2, IsDeleted = false, ProvinceName = "West Virginia" },
                        new { ProvinceId = 82, CountryId = 2, IsDeleted = false, ProvinceName = "Wisconsin" },
                        new { ProvinceId = 83, CountryId = 2, IsDeleted = false, ProvinceName = "Wyoming" }
                    );
                });

            modelBuilder.Entity("DataAccess.DbEntities.QualificationDetails", b =>
                {
                    b.Property<int>("QualificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("QualificationName")
                        .HasMaxLength(50);

                    b.HasKey("QualificationId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("QualificationDetails");
                });

            modelBuilder.Entity("DataAccess.DbEntities.RatingBasedCriteria", b =>
                {
                    b.Property<int>("RatingBasedCriteriaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CriteriaQuestion");

                    b.Property<int>("InterviewDetailsId");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int?>("Rating");

                    b.HasKey("RatingBasedCriteriaId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("InterviewDetailsId");

                    b.HasIndex("ModifiedById");

                    b.ToTable("RatingBasedCriteria");
                });

            modelBuilder.Entity("DataAccess.DbEntities.RolePermissions", b =>
                {
                    b.Property<int>("RolesPermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<bool>("CanEdit");

                    b.Property<bool>("CanView");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CurrentPermissionId");

                    b.Property<bool?>("IsDeleted");

                    b.Property<bool>("IsGrant");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int>("ModuleId");

                    b.Property<int?>("PageId");

                    b.Property<string>("RoleId");

                    b.HasKey("RolesPermissionId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("PageId");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("DataAccess.DbEntities.SalaryHeadDetails", b =>
                {
                    b.Property<int>("SalaryHeadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<long?>("AccountNo");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<string>("HeadName")
                        .HasMaxLength(50);

                    b.Property<int>("HeadTypeId");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int?>("TransactionTypeId");

                    b.HasKey("SalaryHeadId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("SalaryHeadDetails");

                    b.HasData(
                        new { SalaryHeadId = 1, Description = "Tr Allowance", HeadName = "Tr Allowance", HeadTypeId = 1, IsDeleted = false, TransactionTypeId = 2 },
                        new { SalaryHeadId = 2, Description = "Food Allowance", HeadName = "Food Allowance", HeadTypeId = 1, IsDeleted = false, TransactionTypeId = 2 },
                        new { SalaryHeadId = 3, Description = "Fine Deduction", HeadName = "Fine Deduction", HeadTypeId = 2, IsDeleted = false, TransactionTypeId = 1 },
                        new { SalaryHeadId = 4, Description = "Capacity Building Deduction", HeadName = "Capacity Building Deduction", HeadTypeId = 2, IsDeleted = false, TransactionTypeId = 1 },
                        new { SalaryHeadId = 5, Description = "Security Deduction", HeadName = "Security Deduction", HeadTypeId = 2, IsDeleted = false, TransactionTypeId = 1 },
                        new { SalaryHeadId = 6, Description = "Other Allowance", HeadName = "Other Allowance", HeadTypeId = 1, IsDeleted = false, TransactionTypeId = 2 },
                        new { SalaryHeadId = 7, Description = "Other Deduction", HeadName = "Other Deduction", HeadTypeId = 2, IsDeleted = false, TransactionTypeId = 1 },
                        new { SalaryHeadId = 8, Description = "Medical Allowance", HeadName = "Medical Allowance", HeadTypeId = 1, IsDeleted = false, TransactionTypeId = 2 },
                        new { SalaryHeadId = 9, Description = "Other1Allowance", HeadName = "Other1Allowance", HeadTypeId = 1, IsDeleted = false, TransactionTypeId = 2 },
                        new { SalaryHeadId = 10, Description = "Other2Allowance", HeadName = "Other2Allowance", HeadTypeId = 1, IsDeleted = false, TransactionTypeId = 2 },
                        new { SalaryHeadId = 11, Description = "Basic Pay (In hours)", HeadName = "Basic Pay (In hours)", HeadTypeId = 3, IsDeleted = false, TransactionTypeId = 2 }
                    );
                });

            modelBuilder.Entity("DataAccess.DbEntities.SalaryTaxReportContent", b =>
                {
                    b.Property<int>("SalaryTaxReportContentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("EmployerAuthorizedOfficerName");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int>("OfficeId");

                    b.Property<string>("PositionAuthorizedOfficer");

                    b.HasKey("SalaryTaxReportContentId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("SalaryTaxReportContent");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Store.InventoryItemType", b =>
                {
                    b.Property<int>("ItemType")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("TypeName");

                    b.HasKey("ItemType");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("InventoryItemType");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Store.ItemPurchaseDocument", b =>
                {
                    b.Property<int>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("DocumentGuid");

                    b.Property<string>("DocumentName");

                    b.Property<byte[]>("File");

                    b.Property<string>("FileName");

                    b.Property<string>("FileType");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Purchase");

                    b.HasKey("DocumentId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("Purchase");

                    b.ToTable("ItemPurchaseDocuments");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Store.MotorFuel", b =>
                {
                    b.Property<string>("FuelId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<long>("FuelQuantity");

                    b.Property<int>("Generator");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Order");

                    b.Property<int>("Vehicle");

                    b.HasKey("FuelId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Generator");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("Order");

                    b.HasIndex("Vehicle");

                    b.ToTable("VehicleFuel");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Store.MotorMaintenance", b =>
                {
                    b.Property<string>("MaintenanceId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<int>("Generator");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Order");

                    b.Property<string>("StoreName")
                        .IsRequired();

                    b.Property<int>("Vehicle");

                    b.HasKey("MaintenanceId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Generator");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("Order");

                    b.HasIndex("Vehicle");

                    b.ToTable("MotorMaintenances");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Store.MotorSparePart", b =>
                {
                    b.Property<string>("PartId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int>("Generator");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Order");

                    b.Property<string>("PartDescription");

                    b.Property<string>("PartName");

                    b.Property<bool>("PartUsed");

                    b.Property<int>("Vehicle");

                    b.HasKey("PartId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Generator");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("Order");

                    b.HasIndex("Vehicle");

                    b.ToTable("MotorSpareParts");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Store.PaymentTypes", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<long>("ChartOfAccountNewId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name");

                    b.HasKey("PaymentId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("PaymentTypes");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Store.PurchaseGenerator", b =>
                {
                    b.Property<int>("GeneratorId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("GeneratorBrand");

                    b.Property<string>("GeneratorModel");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("MakeYear");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Purchase")
                        .IsRequired();

                    b.Property<string>("SerialBarCode");

                    b.HasKey("GeneratorId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("Purchase");

                    b.ToTable("PurchaseGenerators");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Store.PurchaseUnitType", b =>
                {
                    b.Property<int>("UnitTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("UnitTypeName");

                    b.HasKey("UnitTypeId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("PurchaseUnitType");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Store.PurchaseVehicle", b =>
                {
                    b.Property<int>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Purchase");

                    b.Property<string>("VehicleBrand");

                    b.Property<string>("VehicleDescription");

                    b.Property<string>("VehicleImageFileName");

                    b.Property<string>("VehicleImageFileType");

                    b.Property<string>("VehicleImageName");

                    b.Property<string>("VehicleMakeYear");

                    b.Property<string>("VehicleModel");

                    b.Property<string>("VehiclePlate");

                    b.Property<string>("VehicleSerialNo");

                    b.HasKey("VehicleId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("Purchase");

                    b.ToTable("PurchaseVehicles");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Store.ReceiptType", b =>
                {
                    b.Property<int>("ReceiptTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("ReceiptTypeName");

                    b.HasKey("ReceiptTypeId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("ReceiptType");

                    b.HasData(
                        new { ReceiptTypeId = 1, IsDeleted = false, ReceiptTypeName = "Purchased" },
                        new { ReceiptTypeId = 2, IsDeleted = false, ReceiptTypeName = "Transfers" },
                        new { ReceiptTypeId = 3, IsDeleted = false, ReceiptTypeName = "Donation" },
                        new { ReceiptTypeId = 4, IsDeleted = false, ReceiptTypeName = "Take Over" },
                        new { ReceiptTypeId = 5, IsDeleted = false, ReceiptTypeName = "Loan" },
                        new { ReceiptTypeId = 6, IsDeleted = false, ReceiptTypeName = "Return" },
                        new { ReceiptTypeId = 7, IsDeleted = false, ReceiptTypeName = "Other" }
                    );
                });

            modelBuilder.Entity("DataAccess.DbEntities.Store.StatusAtTimeOfIssue", b =>
                {
                    b.Property<int>("StatusAtTimeOfIssueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("StatusName");

                    b.HasKey("StatusAtTimeOfIssueId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("StatusAtTimeOfIssue");

                    b.HasData(
                        new { StatusAtTimeOfIssueId = 1, IsDeleted = false, StatusName = "New" },
                        new { StatusAtTimeOfIssueId = 2, IsDeleted = false, StatusName = "Useable" },
                        new { StatusAtTimeOfIssueId = 3, IsDeleted = false, StatusName = "To Repair" },
                        new { StatusAtTimeOfIssueId = 4, IsDeleted = false, StatusName = "Damage" },
                        new { StatusAtTimeOfIssueId = 5, IsDeleted = false, StatusName = "Sold" },
                        new { StatusAtTimeOfIssueId = 6, IsDeleted = false, StatusName = "Stolen" },
                        new { StatusAtTimeOfIssueId = 7, IsDeleted = false, StatusName = "Handover" },
                        new { StatusAtTimeOfIssueId = 8, IsDeleted = false, StatusName = "Demolished" },
                        new { StatusAtTimeOfIssueId = 9, IsDeleted = false, StatusName = "Broken" }
                    );
                });

            modelBuilder.Entity("DataAccess.DbEntities.Store.StoreItemGroup", b =>
                {
                    b.Property<long>("ItemGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<string>("InventoryId");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ItemGroupCode");

                    b.Property<string>("ItemGroupName");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("ItemGroupId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("InventoryId");

                    b.HasIndex("ModifiedById");

                    b.ToTable("StoreItemGroups");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Store.StoreItemPurchase", b =>
                {
                    b.Property<string>("PurchaseId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("ApplyDepreciation");

                    b.Property<int?>("AssetTypeId");

                    b.Property<long?>("BudgetLineId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int>("Currency");

                    b.Property<DateTime>("DeliveryDate");

                    b.Property<double>("DepreciationRate");

                    b.Property<string>("ImageFileName");

                    b.Property<string>("ImageFileType");

                    b.Property<string>("InventoryItem")
                        .IsRequired();

                    b.Property<DateTime?>("InvoiceDate");

                    b.Property<string>("InvoiceFileName");

                    b.Property<string>("InvoiceFileType");

                    b.Property<string>("InvoiceNo");

                    b.Property<bool?>("IsDeleted");

                    b.Property<bool>("IsPurchaseVerified");

                    b.Property<int?>("JournalCode");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int?>("OfficeId");

                    b.Property<int?>("PaymentTypeId");

                    b.Property<long?>("ProjectId");

                    b.Property<DateTime>("PurchaseDate");

                    b.Property<int>("PurchasedById");

                    b.Property<int>("Quantity");

                    b.Property<int?>("ReceiptTypeId");

                    b.Property<string>("ReceivedFromLocation");

                    b.Property<string>("SerialNo")
                        .IsRequired();

                    b.Property<int?>("Status");

                    b.Property<long>("UnitCost");

                    b.Property<int>("UnitType");

                    b.Property<long?>("VerifiedPurchaseVoucher");

                    b.Property<DateTime>("VoucherDate");

                    b.Property<long?>("VoucherId");

                    b.HasKey("PurchaseId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Currency");

                    b.HasIndex("InventoryItem");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ProjectId");

                    b.HasIndex("PurchasedById");

                    b.HasIndex("ReceiptTypeId");

                    b.HasIndex("Status");

                    b.HasIndex("UnitType");

                    b.HasIndex("VoucherId");

                    b.ToTable("StoreItemPurchases");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Store.StorePurchaseOrder", b =>
                {
                    b.Property<string>("OrderId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("InventoryItem");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("IssedToLocation");

                    b.Property<DateTime>("IssueDate");

                    b.Property<string>("IssueVoucherNo");

                    b.Property<int>("IssuedQuantity");

                    b.Property<int>("IssuedToEmployeeId");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<bool>("MustReturn");

                    b.Property<long>("Project");

                    b.Property<string>("Purchase");

                    b.Property<string>("Remarks");

                    b.Property<bool>("Returned");

                    b.Property<DateTime?>("ReturnedDate");

                    b.Property<int>("StatusAtTimeOfIssue");

                    b.HasKey("OrderId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("InventoryItem");

                    b.HasIndex("IssuedToEmployeeId");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("Purchase");

                    b.ToTable("StorePurchaseOrders");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Store.VehicleLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<long>("Latitude");

                    b.Property<long>("Longitude");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<DateTime>("Time");

                    b.Property<int>("Vehicle");

                    b.HasKey("Id");

                    b.HasIndex("Vehicle");

                    b.ToTable("VehicleLocations");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Store.VehicleMileage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<long>("Mileage");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int>("Vehicle");

                    b.Property<bool>("Verified");

                    b.HasKey("Id");

                    b.HasIndex("Vehicle");

                    b.ToTable("VehicleMileages");
                });

            modelBuilder.Entity("DataAccess.DbEntities.StoreInventory", b =>
                {
                    b.Property<string>("InventoryId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AssetType");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("InventoryCode");

                    b.Property<long?>("InventoryCreditAccount");

                    b.Property<long>("InventoryDebitAccount");

                    b.Property<string>("InventoryDescription");

                    b.Property<string>("InventoryName");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("InventoryId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("InventoryCreditAccount");

                    b.HasIndex("InventoryDebitAccount");

                    b.HasIndex("ModifiedById");

                    b.ToTable("StoreInventories");
                });

            modelBuilder.Entity("DataAccess.DbEntities.StoreInventoryItem", b =>
                {
                    b.Property<string>("ItemId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ItemCode");

                    b.Property<long?>("ItemGroupId");

                    b.Property<string>("ItemInventory");

                    b.Property<string>("ItemName");

                    b.Property<int>("ItemType");

                    b.Property<string>("MasterInventoryCode");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("ItemId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ItemGroupId");

                    b.HasIndex("ItemInventory");

                    b.HasIndex("ItemType");

                    b.HasIndex("ModifiedById");

                    b.ToTable("InventoryItems");
                });

            modelBuilder.Entity("DataAccess.DbEntities.StoreSourceCodeDetail", b =>
                {
                    b.Property<long>("SourceCodeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .HasMaxLength(200);

                    b.Property<string>("Code");

                    b.Property<int>("CodeTypeId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Description")
                        .HasMaxLength(100);

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(100);

                    b.Property<string>("Fax")
                        .HasMaxLength(50);

                    b.Property<string>("Guarantor")
                        .HasMaxLength(50);

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Phone")
                        .HasMaxLength(50);

                    b.HasKey("SourceCodeId");

                    b.HasIndex("CodeTypeId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("StoreSourceCodeDetail");
                });

            modelBuilder.Entity("DataAccess.DbEntities.StrongandWeakPoints", b =>
                {
                    b.Property<int>("StrongPointsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<DateTime>("CurrentAppraisalDate");

                    b.Property<int>("EmployeeAppraisalDetailsId");

                    b.Property<int>("EmployeeId");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Point");

                    b.Property<int>("Status");

                    b.HasKey("StrongPointsId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("StrongandWeakPoints");
                });

            modelBuilder.Entity("DataAccess.DbEntities.TaskMaster", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Priority")
                        .HasMaxLength(20);

                    b.Property<long?>("ProjectId");

                    b.Property<string>("Status")
                        .HasMaxLength(50);

                    b.Property<string>("TaskName");

                    b.HasKey("TaskId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ProjectId");

                    b.ToTable("TaskMaster");
                });

            modelBuilder.Entity("DataAccess.DbEntities.TechnicalQuestion", b =>
                {
                    b.Property<int>("TechnicalQuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Question");

                    b.HasKey("TechnicalQuestionId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("TechnicalQuestion");
                });

            modelBuilder.Entity("DataAccess.DbEntities.UserDetailOffices", b =>
                {
                    b.Property<int>("UserOfficesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int>("OfficeId");

                    b.Property<int>("UserId");

                    b.HasKey("UserOfficesId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("UserDetailOffices");
                });

            modelBuilder.Entity("DataAccess.DbEntities.UserDetails", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("AspNetUserId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int>("DepartmentId");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50);

                    b.Property<Guid>("Id");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName")
                        .HasMaxLength(50);

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("OfficeCode")
                        .HasMaxLength(10);

                    b.Property<int?>("OfficeId");

                    b.Property<string>("Password")
                        .HasMaxLength(50);

                    b.Property<byte?>("Status");

                    b.Property<byte?>("UserType");

                    b.Property<string>("Username")
                        .HasMaxLength(50);

                    b.HasKey("UserID");

                    b.ToTable("UserDetails");
                });

            modelBuilder.Entity("DataAccess.DbEntities.VoucherDetail", b =>
                {
                    b.Property<long>("VoucherNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<long?>("BudgetLineId");

                    b.Property<string>("ChequeNo")
                        .HasMaxLength(10);

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CurrencyCode");

                    b.Property<int?>("CurrencyId");

                    b.Property<string>("Description");

                    b.Property<int?>("FinancialYearId");

                    b.Property<bool?>("IsDeleted");

                    b.Property<bool>("IsExchangeGainLossVoucher");

                    b.Property<bool>("IsVoucherVerified");

                    b.Property<int?>("JournalCode");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("OfficeCode");

                    b.Property<int?>("OfficeId");

                    b.Property<long?>("ProjectId");

                    b.Property<string>("ReferenceNo")
                        .HasMaxLength(20);

                    b.Property<DateTime>("VoucherDate");

                    b.Property<string>("VoucherMode");

                    b.Property<string>("VoucherType");

                    b.Property<int?>("VoucherTypeId");

                    b.HasKey("VoucherNo");

                    b.HasIndex("BudgetLineId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("FinancialYearId");

                    b.HasIndex("JournalCode");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("OfficeId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("VoucherNo")
                        .IsUnique();

                    b.HasIndex("VoucherTypeId");

                    b.ToTable("VoucherDetail");
                });

            modelBuilder.Entity("DataAccess.DbEntities.VoucherDocumentDetail", b =>
                {
                    b.Property<int>("DocumentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<DateTime?>("DocumentDate");

                    b.Property<string>("DocumentFilePath");

                    b.Property<string>("DocumentGUID");

                    b.Property<string>("DocumentName")
                        .HasMaxLength(100);

                    b.Property<int?>("DocumentType");

                    b.Property<string>("Extension");

                    b.Property<byte[]>("FilePath");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<long>("VoucherNo");

                    b.HasKey("DocumentID");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("VoucherNo");

                    b.ToTable("VoucherDocumentDetail");
                });

            modelBuilder.Entity("DataAccess.DbEntities.VoucherTransactions", b =>
                {
                    b.Property<long>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<double?>("AFGAmount");

                    b.Property<double?>("Amount");

                    b.Property<string>("Area");

                    b.Property<long?>("BudgetLineId");

                    b.Property<long?>("ChartOfAccountNewId");

                    b.Property<string>("CostBook");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<double?>("Credit");

                    b.Property<long?>("CreditAccount");

                    b.Property<int?>("CurrencyId");

                    b.Property<double?>("Debit");

                    b.Property<long?>("DebitAccount");

                    b.Property<string>("Description");

                    b.Property<string>("Donor");

                    b.Property<double?>("EURAmount");

                    b.Property<int?>("FinancialYearId");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("Job");

                    b.Property<long?>("JobId");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int?>("OfficeId");

                    b.Property<double?>("PKRAmount");

                    b.Property<string>("Program");

                    b.Property<string>("Project");

                    b.Property<long?>("ProjectId");

                    b.Property<string>("Sector");

                    b.Property<DateTime?>("TransactionDate");

                    b.Property<double?>("USDAmount");

                    b.Property<long?>("VoucherNo");

                    b.HasKey("TransactionId");

                    b.HasIndex("BudgetLineId");

                    b.HasIndex("ChartOfAccountNewId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("OfficeId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("TransactionId")
                        .IsUnique();

                    b.HasIndex("VoucherNo");

                    b.HasIndex("TransactionDate", "ChartOfAccountNewId");

                    b.ToTable("VoucherTransactions");
                });

            modelBuilder.Entity("DataAccess.DbEntities.VoucherType", b =>
                {
                    b.Property<int>("VoucherTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("VoucherTypeName")
                        .HasMaxLength(50);

                    b.HasKey("VoucherTypeId");

                    b.ToTable("VoucherType");

                    b.HasData(
                        new { VoucherTypeId = 1, VoucherTypeName = "Adjustment" },
                        new { VoucherTypeId = 2, VoucherTypeName = "Journal" }
                    );
                });

            modelBuilder.Entity("HumanitarianAssistance.Entities.Models.AccountNoteDetail", b =>
                {
                    b.Property<long>("AccountCode")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("AccountNote");

                    b.Property<string>("BalanceType");

                    b.Property<string>("Narration");

                    b.HasKey("AccountCode");

                    b.ToTable("AccountNoteDetail");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DataAccess.DbEntities.AccountHeadType", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.AccountingNew.AccountFilterType", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.AccountingNew.ChartOfAccountNew", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AccountingNew.AccountFilterType", "AccountFilterType")
                        .WithMany()
                        .HasForeignKey("AccountFilterTypeId");

                    b.HasOne("DataAccess.DbEntities.AccountLevel", "AccountLevels")
                        .WithMany()
                        .HasForeignKey("AccountLevelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.DbEntities.AccountType", "AccountType")
                        .WithMany()
                        .HasForeignKey("AccountTypeId");

                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.AccountingNew.ExchangeRateVerification", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.AccountType", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AccountHeadType", "AccountHeadType")
                        .WithMany()
                        .HasForeignKey("AccountHeadTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.ActivityMaster", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("DataAccess.DbEntities.TaskMaster", "TaskMaster")
                        .WithMany("ActivityMaster")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataAccess.DbEntities.Advances", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.CurrencyDetails", "CurrencyDetails")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.DbEntities.EmployeeDetail", "EmployeeDetail")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.AgreeDisagreePermission", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("DataAccess.DbEntities.ApplicationPages", "ApplicationPages")
                        .WithMany()
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataAccess.DbEntities.AnalyticalDetail", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.ApplicationPages", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.AppraisalGeneralQuestions", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.ApproveRejectPermission", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("DataAccess.DbEntities.ApplicationPages", "ApplicationPages")
                        .WithMany()
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataAccess.DbEntities.AssignActivity", b =>
                {
                    b.HasOne("DataAccess.DbEntities.ActivityMaster", "ActivityMaster")
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("DataAccess.DbEntities.ProjectDetails", "ProjectDetails")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.DbEntities.TaskMaster", "TaskMaster")
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.DbEntities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("DataAccess.DbEntities.AssignActivityApproveBy", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "ApprovedBy")
                        .WithMany()
                        .HasForeignKey("ApprovedById");

                    b.HasOne("DataAccess.DbEntities.AssignActivity", "AssignActivity")
                        .WithMany()
                        .HasForeignKey("AssignActivityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataAccess.DbEntities.AssignActivityFeedback", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AssignActivity", "AssignActivity")
                        .WithMany()
                        .HasForeignKey("AssignActivityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("DataAccess.DbEntities.AssignLeaveToEmployee", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.EmployeeDetail", "EmployeeDetails")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.DbEntities.FinancialYearDetail", "FinancialYearDetails")
                        .WithMany()
                        .HasForeignKey("FinancialYearId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.DbEntities.LeaveReasonDetail", "LeaveReasonDetails")
                        .WithMany()
                        .HasForeignKey("LeaveReasonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.BudgetLineType", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.BudgetReceivable", b =>
                {
                    b.HasOne("DataAccess.DbEntities.ProjectBudgetLine", "ProjectBudgetLine")
                        .WithMany()
                        .HasForeignKey("BudgetLineId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("DataAccess.DbEntities.ProjectDetails", "ProjectDetails")
                        .WithMany()
                        .HasForeignKey("ProjectId");
                });

            modelBuilder.Entity("DataAccess.DbEntities.BudgetReceivedAmount", b =>
                {
                    b.HasOne("DataAccess.DbEntities.BudgetReceivable", "BudgetReceivable")
                        .WithMany()
                        .HasForeignKey("BudgetReceivalbeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.CategoryPopulator", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AccountType", "AccountType")
                        .WithMany()
                        .HasForeignKey("AccountTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.ContractTypeContent", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.EmployeeContractType", "EmployeeContractType")
                        .WithMany()
                        .HasForeignKey("EmployeeContractTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.CountryDetails", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.CurrencyDetails", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Department", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("DataAccess.DbEntities.OfficeDetail", "OfficeDetails")
                        .WithMany()
                        .HasForeignKey("OfficeId");
                });

            modelBuilder.Entity("DataAccess.DbEntities.DesignationDetail", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.DistrictDetail", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.DonorDetail", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.EmailSettingDetail", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.EmailType", "EmailTypes")
                        .WithMany()
                        .HasForeignKey("EmailTypeId");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.EmailType", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.EmployeeAnalyticalDetail", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.EmployeeApplyLeave", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.EmployeeDetail", "EmployeeDetails")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("DataAccess.DbEntities.FinancialYearDetail", "FinancialYearDetail")
                        .WithMany()
                        .HasForeignKey("FinancialYearId");

                    b.HasOne("DataAccess.DbEntities.LeaveReasonDetail", "LeaveReasonDetails")
                        .WithMany()
                        .HasForeignKey("LeaveReasonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.EmployeeAppraisalDetails", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.EmployeeDetail", "EmployeeDetail")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.EmployeeAppraisalQuestions", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppraisalGeneralQuestions", "AppraisalGeneralQuestions")
                        .WithMany()
                        .HasForeignKey("AppraisalGeneralQuestionsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.EmployeeAppraisalTeamMember", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.EmployeeAttendance", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.EmployeeDetail", "EmployeeDetails")
                        .WithMany("EmployeeAttendance")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.DbEntities.FinancialYearDetail", "FinancialYearDetail")
                        .WithMany()
                        .HasForeignKey("FinancialYearId");

                    b.HasOne("DataAccess.DbEntities.HolidayDetails", "HolidayDetails")
                        .WithMany()
                        .HasForeignKey("HolidayId");

                    b.HasOne("DataAccess.DbEntities.LeaveReasonDetail", "LeaveReasonDetail")
                        .WithMany()
                        .HasForeignKey("LeaveReasonId");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.EmployeeContract", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.EmployeeDetail", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.DbEntities.JobGrade", "JobGrade")
                        .WithMany()
                        .HasForeignKey("Grade");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.EmployeeDetail", b =>
                {
                    b.HasOne("DataAccess.DbEntities.CountryDetails", "CountryDetails")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.EmployeeType", "EmployeeType")
                        .WithMany()
                        .HasForeignKey("EmployeeTypeId");

                    b.HasOne("DataAccess.DbEntities.QualificationDetails", "QualificationDetails")
                        .WithMany()
                        .HasForeignKey("HigherQualificationId");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("DataAccess.DbEntities.NationalityDetails", "NationalityDetails")
                        .WithMany()
                        .HasForeignKey("NationalityId");

                    b.HasOne("DataAccess.DbEntities.ProvinceDetails", "ProvinceDetails")
                        .WithMany()
                        .HasForeignKey("ProvinceId");
                });

            modelBuilder.Entity("DataAccess.DbEntities.EmployeeDocumentDetail", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.EmployeeDetail", "EmployeeDetail")
                        .WithMany()
                        .HasForeignKey("EmployeeID");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.EmployeeEducations", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.EmployeeDetail", "EmployeeDetail")
                        .WithMany()
                        .HasForeignKey("EmployeeID");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.EmployeeEvaluation", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.EmployeeEvaluationTraining", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.EmployeeHealthInfo", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.EmployeeDetail", "EmployeeDetails")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.EmployeeHealthQuestion", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.EmployeeHistoryDetail", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.EmployeeDetail", "EmployeeDetail")
                        .WithMany()
                        .HasForeignKey("EmployeeID");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.EmployeeHistoryOutsideCountry", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.EmployeeDetail", "EmployeeDetail")
                        .WithMany()
                        .HasForeignKey("EmployeeID");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.EmployeeHistoryOutsideOrganization", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.EmployeeDetail", "EmployeeDetail")
                        .WithMany()
                        .HasForeignKey("EmployeeID");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.EmployeeInfoReferences", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.EmployeeDetail", "EmployeeDetail")
                        .WithMany()
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.EmployeeLanguages", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.LanguageDetail", "LanguageDetail")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.EmployeeMonthlyAttendance", b =>
                {
                    b.HasOne("DataAccess.DbEntities.Advances", "Advance")
                        .WithMany()
                        .HasForeignKey("AdvanceId");

                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.EmployeeDetail", "EmployeeDetails")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.EmployeeMonthlyPayroll", b =>
                {
                    b.HasOne("DataAccess.DbEntities.CurrencyDetails", "CurrencyDetails")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.DbEntities.EmployeeDetail", "EmployeeDetails")
                        .WithMany()
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.DbEntities.SalaryHeadDetails", "SalaryHeadDetails")
                        .WithMany()
                        .HasForeignKey("SalaryHeadId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataAccess.DbEntities.EmployeeOtherSkills", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.EmployeeDetail", "EmployeeDetail")
                        .WithMany()
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.EmployeePaymentTypes", b =>
                {
                    b.HasOne("DataAccess.DbEntities.Advances", "AdvanceDetail")
                        .WithMany()
                        .HasForeignKey("AdvanceId");

                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.EmployeeDetail", "EmployeeDetail")
                        .WithMany()
                        .HasForeignKey("EmployeeID");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.EmployeePayroll", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.CurrencyDetails", "CurrencyDetails")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.HasOne("DataAccess.DbEntities.EmployeeDetail", "EmployeeDetails")
                        .WithMany("EmployeePayrollList")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("DataAccess.DbEntities.SalaryHeadDetails", "SalaryHeadDetails")
                        .WithMany()
                        .HasForeignKey("SalaryHeadId");
                });

            modelBuilder.Entity("DataAccess.DbEntities.EmployeePayrollAccountHead", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.EmployeeDetail", "EmployeeDetail")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("DataAccess.DbEntities.PayrollAccountHead", "PayrollAccountHead")
                        .WithMany()
                        .HasForeignKey("PayrollHeadId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataAccess.DbEntities.EmployeePayrollDetailTest", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.EmployeePayrollForMonth", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.EmployeeDetail", "EmployeeDetail")
                        .WithMany()
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.EmployeePayrollMonth", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.CurrencyDetails", "CurrencyDetails")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.DbEntities.EmployeeDetail", "EmployeeDetails")
                        .WithMany()
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("DataAccess.DbEntities.SalaryHeadDetails", "SalaryHeadDetails")
                        .WithMany()
                        .HasForeignKey("SalaryHeadId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataAccess.DbEntities.EmployeePensionRate", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.FinancialYearDetail", "FinancialYearDetail")
                        .WithMany()
                        .HasForeignKey("FinancialYearId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.EmployeeProfessionalDetail", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("DataAccess.DbEntities.DesignationDetail", "DesignationDetails")
                        .WithMany()
                        .HasForeignKey("DesignationId");

                    b.HasOne("DataAccess.DbEntities.EmployeeContractType", "EmployeeContractType")
                        .WithMany()
                        .HasForeignKey("EmployeeContractTypeId");

                    b.HasOne("DataAccess.DbEntities.EmployeeDetail")
                        .WithOne("EmployeeProfessionalDetail")
                        .HasForeignKey("DataAccess.DbEntities.EmployeeProfessionalDetail", "EmployeeId");

                    b.HasOne("DataAccess.DbEntities.EmployeeType", "EmployeeType")
                        .WithMany()
                        .HasForeignKey("EmployeeTypeId");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("DataAccess.DbEntities.OfficeDetail", "OfficeDetail")
                        .WithMany()
                        .HasForeignKey("OfficeId");

                    b.HasOne("DataAccess.DbEntities.ProfessionDetails", "professionDetails")
                        .WithMany()
                        .HasForeignKey("ProfessionId");
                });

            modelBuilder.Entity("DataAccess.DbEntities.EmployeeRelativeInfo", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.EmployeeDetail", "EmployeeDetail")
                        .WithMany()
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.EmployeeSalaryAnalyticalInfo", b =>
                {
                    b.HasOne("DataAccess.DbEntities.ProjectBudgetLine", "ProjectBudgetLine")
                        .WithMany()
                        .HasForeignKey("BudgetLineId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.EmployeeDetail", "EmployeeDetail")
                        .WithMany()
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("DataAccess.DbEntities.ProjectDetails", "ProjectDetails")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataAccess.DbEntities.EmployeeSalaryBudget", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.EmployeeDetail", "EmployeeDetail")
                        .WithMany()
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.EmployeeSalaryDetails", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.CurrencyDetails", "CurrencyDetails")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.DbEntities.EmployeeDetail", "EmployeeDetails")
                        .WithOne("EmployeeSalaryDetails")
                        .HasForeignKey("DataAccess.DbEntities.EmployeeSalaryDetails", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.EmployeeSalaryPaymentHistory", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.EmployeeDetail", "EmployeeDetail")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("DataAccess.DbEntities.VoucherDetail", "VoucherDetail")
                        .WithMany()
                        .HasForeignKey("VoucherNo")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataAccess.DbEntities.EmployeeType", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.ErrorLog.Errorlog", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.ExchangeRate", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.CurrencyDetails", "CurrencyFrom")
                        .WithMany()
                        .HasForeignKey("FromCurrency");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("DataAccess.DbEntities.OfficeDetail", "OfficeDetail")
                        .WithMany()
                        .HasForeignKey("OfficeId");

                    b.HasOne("DataAccess.DbEntities.CurrencyDetails", "CurrencyTo")
                        .WithMany()
                        .HasForeignKey("ToCurrency");
                });

            modelBuilder.Entity("DataAccess.DbEntities.ExchangeRateDetail", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.ExistInterviewDetails", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.EmployeeDetail", "EmployeeDetail")
                        .WithMany()
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.FinancialYearDetail", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.GainLossSelectedAccounts", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AccountingNew.ChartOfAccountNew", "ChartOfAccountNew")
                        .WithMany()
                        .HasForeignKey("ChartOfAccountNewId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.HolidayDetails", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.FinancialYearDetail", "FinancialYearDetail")
                        .WithMany()
                        .HasForeignKey("FinancialYearId");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("DataAccess.DbEntities.OfficeDetail", "OfficeDetails")
                        .WithMany()
                        .HasForeignKey("OfficeId");
                });

            modelBuilder.Entity("DataAccess.DbEntities.HolidayWeeklyDetails", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.FinancialYearDetail", "FinancialYearDetails")
                        .WithMany()
                        .HasForeignKey("FinancialYearId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("DataAccess.DbEntities.OfficeDetail", "OfficeDetails")
                        .WithMany()
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataAccess.DbEntities.HRJobInterviewers", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.EmployeeDetail", "EmployeeDetail")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.DbEntities.InterviewDetails", "InterviewDetails")
                        .WithMany("HRJobInterviewersList")
                        .HasForeignKey("InterviewDetailsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.InterviewDetails", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.EmployeeDetail", "EmployeeDetail")
                        .WithMany()
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.InterviewLanguages", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.InterviewDetails", "InterviewDetails")
                        .WithMany("InterviewLanguagesList")
                        .HasForeignKey("InterviewDetailsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.InterviewScheduleDetails", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.EmployeeDetail", "EmployeeDetails")
                        .WithMany("InterviewScheduleDetails")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.DbEntities.JobGrade", "JobGrade")
                        .WithMany()
                        .HasForeignKey("GradeId");

                    b.HasOne("DataAccess.DbEntities.JobHiringDetails", "JobHiringDetails")
                        .WithMany()
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.InterviewTechnicalQuestion", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.InterviewDetails", "InterviewDetails")
                        .WithMany("InterviewTechnicalQuestionList")
                        .HasForeignKey("InterviewDetailsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.InterviewTechnicalQuestions", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.InterviewTrainings", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.InterviewDetails", "InterviewDetails")
                        .WithMany("InterviewTrainingsList")
                        .HasForeignKey("InterviewDetailsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.ItemSpecificationDetails", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.ItemSpecificationMaster", "ItemSpecificationMaster")
                        .WithMany()
                        .HasForeignKey("ItemSpecificationMasterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.ItemSpecificationMaster", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.Store.InventoryItemType", "InventoryItemType")
                        .WithMany()
                        .HasForeignKey("ItemTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("DataAccess.DbEntities.OfficeDetail", "OfficeDetail")
                        .WithMany()
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataAccess.DbEntities.JobDetails", b =>
                {
                    b.HasOne("DataAccess.DbEntities.Marketing.ContractDetails", "ContractDetails")
                        .WithMany()
                        .HasForeignKey("ContractId");

                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.JobPhase", "JobPhases")
                        .WithMany()
                        .HasForeignKey("JobPhaseId");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.JobGrade", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.JobHiringDetails", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.JobGrade", "JobGrade")
                        .WithMany()
                        .HasForeignKey("GradeId");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("DataAccess.DbEntities.OfficeDetail", "OfficeDetails")
                        .WithMany()
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataAccess.DbEntities.JobPhase", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.JournalDetail", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.LanguageDetail", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.LeaveReasonDetail", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.LoggerDetails", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Marketing.ActivityType", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Marketing.Category", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Marketing.Channel", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.Marketing.Medium", "Mediums")
                        .WithMany()
                        .HasForeignKey("MediumId");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Marketing.ClientDetails", b =>
                {
                    b.HasOne("DataAccess.DbEntities.Marketing.Category", "Categories")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Marketing.ContractDetails", b =>
                {
                    b.HasOne("DataAccess.DbEntities.Marketing.ActivityType", "ActivityTypes")
                        .WithMany()
                        .HasForeignKey("ActivityTypeId");

                    b.HasOne("DataAccess.DbEntities.Marketing.ClientDetails", "ClientDetails")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.CurrencyDetails", "CurrencyDetails")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.HasOne("DataAccess.DbEntities.LanguageDetail", "LanguageDetail")
                        .WithMany()
                        .HasForeignKey("LanguageDetailLanguageId");

                    b.HasOne("DataAccess.DbEntities.Marketing.MediaCategory", "MediaCategories")
                        .WithMany()
                        .HasForeignKey("MediaCategoryId");

                    b.HasOne("DataAccess.DbEntities.Marketing.Medium", "Mediums")
                        .WithMany()
                        .HasForeignKey("MediumId");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("DataAccess.DbEntities.Marketing.Nature", "Natures")
                        .WithMany()
                        .HasForeignKey("NatureId");

                    b.HasOne("DataAccess.DbEntities.Marketing.Quality", "Qualities")
                        .WithMany()
                        .HasForeignKey("QualityId");

                    b.HasOne("DataAccess.DbEntities.Marketing.TimeCategory", "TimeCategories")
                        .WithMany()
                        .HasForeignKey("TimeCategoryId");

                    b.HasOne("DataAccess.DbEntities.Marketing.UnitRate", "UnitRates")
                        .WithMany()
                        .HasForeignKey("UnitRateId");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Marketing.JobPriceDetails", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.JobDetails", "JobDetails")
                        .WithMany()
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Marketing.Language", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Marketing.MediaCategory", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Marketing.Medium", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Marketing.Nature", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Marketing.PolicyDaySchedule", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("DataAccess.DbEntities.Marketing.PolicyDetail", "PolicyDetails")
                        .WithMany()
                        .HasForeignKey("PolicyId");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Marketing.PolicyDetail", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.LanguageDetail", "Languages")
                        .WithMany()
                        .HasForeignKey("LanguagesLanguageId");

                    b.HasOne("DataAccess.DbEntities.Marketing.MediaCategory", "MediaCategories")
                        .WithMany()
                        .HasForeignKey("MediaCategoryId");

                    b.HasOne("DataAccess.DbEntities.Marketing.Medium", "Mediums")
                        .WithMany()
                        .HasForeignKey("MediumId");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("DataAccess.DbEntities.Marketing.Producer", "Producers")
                        .WithMany()
                        .HasForeignKey("ProducerId");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Marketing.PolicyOrderSchedule", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("DataAccess.DbEntities.Marketing.PolicyDetail", "PolicyDetails")
                        .WithMany()
                        .HasForeignKey("PolicyId");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Marketing.PolicySchedule", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("DataAccess.DbEntities.Marketing.PolicyDetail", "PolicyDetails")
                        .WithMany()
                        .HasForeignKey("PolicyId");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Marketing.PolicyTimeSchedule", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("DataAccess.DbEntities.Marketing.PolicyDetail", "PolicyDetails")
                        .WithMany()
                        .HasForeignKey("PolicyId");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Marketing.Producer", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Marketing.Quality", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Marketing.ScheduleDetails", b =>
                {
                    b.HasOne("DataAccess.DbEntities.Marketing.Channel", "Channel")
                        .WithMany()
                        .HasForeignKey("ChannelId");

                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.JobDetails", "JobDetails")
                        .WithMany()
                        .HasForeignKey("JobId");

                    b.HasOne("DataAccess.DbEntities.Marketing.Medium", "Mediums")
                        .WithMany()
                        .HasForeignKey("MediumId");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("DataAccess.DbEntities.Marketing.PolicyDetail", "PolicyDetails")
                        .WithMany()
                        .HasForeignKey("PolicyId");

                    b.HasOne("DataAccess.DbEntities.Project.ProjectDetail", "ProjectDetail")
                        .WithMany()
                        .HasForeignKey("ProjectId");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Marketing.TimeCategory", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Marketing.UnitRate", b =>
                {
                    b.HasOne("DataAccess.DbEntities.Marketing.ActivityType", "ActivityTypes")
                        .WithMany()
                        .HasForeignKey("ActivityTypeId");

                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.CurrencyDetails", "CurrencyDetails")
                        .WithMany()
                        .HasForeignKey("CurrencyDetailsCurrencyId");

                    b.HasOne("DataAccess.DbEntities.Marketing.MediaCategory", "MediaCategories")
                        .WithMany()
                        .HasForeignKey("MediaCategoryId");

                    b.HasOne("DataAccess.DbEntities.Marketing.Medium", "Medium")
                        .WithMany()
                        .HasForeignKey("MediumId");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("DataAccess.DbEntities.Marketing.Nature", "Natures")
                        .WithMany()
                        .HasForeignKey("NatureId");

                    b.HasOne("DataAccess.DbEntities.Marketing.Quality", "Qualities")
                        .WithMany()
                        .HasForeignKey("QualityId");

                    b.HasOne("DataAccess.DbEntities.Marketing.TimeCategory", "TimeCategories")
                        .WithMany()
                        .HasForeignKey("TimeCategoryId");
                });

            modelBuilder.Entity("DataAccess.DbEntities.NationalityDetails", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.NotesMaster", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AccountType", "AccountType")
                        .WithMany()
                        .HasForeignKey("AccountTypeId");

                    b.HasOne("DataAccess.DbEntities.AccountingNew.ChartOfAccountNew", "ChartOfAccountNew")
                        .WithMany()
                        .HasForeignKey("ChartOfAccountNewId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.OfficeDetail", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.OnlyForDT.EmployeeDetailDT", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.OrderSchedulePermission", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("DataAccess.DbEntities.ApplicationPages", "ApplicationPages")
                        .WithMany()
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataAccess.DbEntities.PayrollAccountHead", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.PayrollMonthlyHourDetail", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("DataAccess.DbEntities.OfficeDetail", "OfficeDetails")
                        .WithMany()
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataAccess.DbEntities.PensionPaymentHistory", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.EmployeeDetail", "EmployeeDetail")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("DataAccess.DbEntities.VoucherDetail", "VoucherDetail")
                        .WithMany()
                        .HasForeignKey("VoucherNo")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataAccess.DbEntities.Permissions", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.PermissionsInRoles", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.ProfessionDetails", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Project.ActivityDocumentsDetail", b =>
                {
                    b.HasOne("DataAccess.DbEntities.Project.ProjectActivityDetail", "ProjectActivityDetail")
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("DataAccess.DbEntities.Project.ActivityStatusDetail", "ActivityStatusDetail")
                        .WithMany()
                        .HasForeignKey("StatusId");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Project.ActivityStatusDetail", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Project.ApproveProjectDetails", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("DataAccess.DbEntities.Project.ProjectDetail", "ProjectDetail")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataAccess.DbEntities.Project.AreaDetail", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Project.CEAgeGroupDetail", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("DataAccess.DbEntities.Project.ProjectDetail", "ProjectDetail")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataAccess.DbEntities.Project.CEAssumptionDetail", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("DataAccess.DbEntities.Project.ProjectDetail", "ProjectDetail")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataAccess.DbEntities.Project.CEFeasibilityExpertOtherDetail", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("DataAccess.DbEntities.Project.ProjectDetail", "ProjectDetail")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataAccess.DbEntities.Project.CEOccupationDetail", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("DataAccess.DbEntities.Project.ProjectDetail", "ProjectDetail")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataAccess.DbEntities.Project.DistrictMultiSelect", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.DistrictDetail", "DistrictDetail")
                        .WithMany()
                        .HasForeignKey("DistrictID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("DataAccess.DbEntities.Project.ProjectDetail", "ProjectDetail")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.DbEntities.ProvinceDetails", "ProvinceDetails")
                        .WithMany()
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataAccess.DbEntities.Project.DonorCriteriaDetails", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("DataAccess.DbEntities.Project.ProjectDetail", "ProjectDetail")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataAccess.DbEntities.Project.DonorEligibilityCriteria", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("DataAccess.DbEntities.Project.ProjectDetail", "ProjectDetail")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataAccess.DbEntities.Project.EligibilityCriteriaDetail", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("DataAccess.DbEntities.Project.ProjectDetail", "ProjectDetail")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataAccess.DbEntities.Project.FeasibilityCriteriaDetail", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("DataAccess.DbEntities.Project.ProjectDetail", "ProjectDetail")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataAccess.DbEntities.Project.FinancialCriteriaDetail", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("DataAccess.DbEntities.Project.ProjectDetail", "ProjectDetail")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataAccess.DbEntities.Project.FinancialProjectDetail", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("DataAccess.DbEntities.Project.ProjectDetail", "ProjectDetail")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataAccess.DbEntities.Project.GenderConsiderationDetail", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Project.PriorityCriteriaDetail", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("DataAccess.DbEntities.Project.ProjectDetail", "ProjectDetail")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataAccess.DbEntities.Project.PriorityOtherDetail", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("DataAccess.DbEntities.Project.ProjectDetail", "ProjectDetail")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataAccess.DbEntities.Project.ProgramDetail", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Project.ProjectActivityDetail", b =>
                {
                    b.HasOne("DataAccess.DbEntities.Project.ProjectBudgetLineDetail", "ProjectBudgetLineDetail")
                        .WithMany()
                        .HasForeignKey("BudgetLineId");

                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.EmployeeDetail", "EmployeeDetail")
                        .WithMany()
                        .HasForeignKey("EmployeeID");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("DataAccess.DbEntities.OfficeDetail", "OfficeDetail")
                        .WithMany()
                        .HasForeignKey("OfficeId");

                    b.HasOne("DataAccess.DbEntities.Project.ActivityStatusDetail", "ActivityStatusDetail")
                        .WithMany()
                        .HasForeignKey("StatusId");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Project.ProjectArea", b =>
                {
                    b.HasOne("DataAccess.DbEntities.Project.AreaDetail", "AreaDetail")
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("DataAccess.DbEntities.Project.ProjectDetail", "ProjectDetail")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataAccess.DbEntities.Project.ProjectAssignTo", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.EmployeeDetail", "EmployeeDetail")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("DataAccess.DbEntities.Project.ProjectDetail", "ProjectDetail")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataAccess.DbEntities.Project.ProjectBudgetLineDetail", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.CurrencyDetails", "CurrencyDetails")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("DataAccess.DbEntities.Project.ProjectDetail", "ProjectDetail")
                        .WithMany()
                        .HasForeignKey("ProjectId");

                    b.HasOne("DataAccess.DbEntities.Project.ProjectJobDetail", "ProjectJobDetail")
                        .WithMany()
                        .HasForeignKey("ProjectJobId");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Project.ProjectCommunication", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("DataAccess.DbEntities.Project.ProjectDetail", "ProjectDetail")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataAccess.DbEntities.Project.ProjectCommunicationAttachment", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("DataAccess.DbEntities.Project.ProjectCommunication", "ProjectCommunication")
                        .WithMany()
                        .HasForeignKey("PCId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.DbEntities.Project.ProjectDetail", "ProjectDetail")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataAccess.DbEntities.Project.ProjectDetail", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("DataAccess.DbEntities.Project.ProjectPhaseDetails", "ProjectPhaseDetails")
                        .WithMany()
                        .HasForeignKey("ProjectPhaseDetailsId");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Project.ProjectJobDetail", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("DataAccess.DbEntities.Project.ProjectDetail", "ProjectDetail")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataAccess.DbEntities.Project.ProjectOtherDetail", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("DataAccess.DbEntities.Project.ProjectDetail", "ProjectDetail")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataAccess.DbEntities.Project.ProjectPhaseDetails", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Project.ProjectPhaseTime", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("DataAccess.DbEntities.Project.ProjectDetail", "ProjectDetail")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.DbEntities.Project.ProjectPhaseDetails", "ProjectPhaseDetails")
                        .WithMany()
                        .HasForeignKey("ProjectPhaseDetailsId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataAccess.DbEntities.Project.ProjectProgram", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("DataAccess.DbEntities.Project.ProgramDetail", "ProgramDetail")
                        .WithMany()
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.DbEntities.Project.ProjectDetail", "ProjectDetail")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataAccess.DbEntities.Project.ProjectProposalDetail", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("DataAccess.DbEntities.Project.ProjectDetail", "ProjectDetail")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataAccess.DbEntities.Project.ProjectSector", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("DataAccess.DbEntities.Project.ProjectDetail", "ProjectDetail")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.DbEntities.Project.SectorDetails", "SectorDetails")
                        .WithMany()
                        .HasForeignKey("SectorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataAccess.DbEntities.Project.ProvinceMultiSelect", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("DataAccess.DbEntities.Project.ProjectDetail", "ProjectDetail")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.DbEntities.ProvinceDetails", "ProvinceDetails")
                        .WithMany()
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataAccess.DbEntities.Project.PurposeofInitiativeCriteria", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("DataAccess.DbEntities.Project.ProjectDetail", "ProjectDetail")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataAccess.DbEntities.Project.RiskCriteriaDetail", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("DataAccess.DbEntities.Project.ProjectDetail", "ProjectDetail")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataAccess.DbEntities.Project.SectorDetails", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Project.SecurityConsiderationDetail", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Project.SecurityConsiderationMultiSelect", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("DataAccess.DbEntities.Project.ProjectDetail", "ProjectDetail")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.DbEntities.Project.SecurityConsiderationDetail", "SecurityConsiderationDetail")
                        .WithMany()
                        .HasForeignKey("SecurityConsiderationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataAccess.DbEntities.Project.SecurityDetail", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Project.StrengthConsiderationDetail", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Project.TargetBeneficiaryDetail", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Project.WinProjectDetails", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("DataAccess.DbEntities.Project.ProjectDetail", "ProjectDetail")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataAccess.DbEntities.ProjectBudgetLine", b =>
                {
                    b.HasOne("DataAccess.DbEntities.BudgetLineType", "BudgetLineType")
                        .WithMany()
                        .HasForeignKey("BudgetLineTypeId");

                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("DataAccess.DbEntities.ProjectDetails", "ProjectDetails")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataAccess.DbEntities.ProjectDetails", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.ProvinceDetails", b =>
                {
                    b.HasOne("DataAccess.DbEntities.CountryDetails", "CountryDetails")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.QualificationDetails", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.RatingBasedCriteria", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.InterviewDetails", "InterviewDetails")
                        .WithMany("RatingBasedCriteriaList")
                        .HasForeignKey("InterviewDetailsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.RolePermissions", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("DataAccess.DbEntities.ApplicationPages", "ApplicationPages")
                        .WithMany()
                        .HasForeignKey("PageId");
                });

            modelBuilder.Entity("DataAccess.DbEntities.SalaryHeadDetails", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.SalaryTaxReportContent", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Store.InventoryItemType", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Store.ItemPurchaseDocument", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("DataAccess.DbEntities.Store.StoreItemPurchase", "ItemPurchase")
                        .WithMany()
                        .HasForeignKey("Purchase");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Store.MotorFuel", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.Store.PurchaseGenerator", "PurchaseGenerator")
                        .WithMany()
                        .HasForeignKey("Generator")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("DataAccess.DbEntities.Store.StorePurchaseOrder", "PurchaseOrder")
                        .WithMany()
                        .HasForeignKey("Order");

                    b.HasOne("DataAccess.DbEntities.Store.PurchaseVehicle", "PurchaseVehicle")
                        .WithMany()
                        .HasForeignKey("Vehicle")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataAccess.DbEntities.Store.MotorMaintenance", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.Store.PurchaseGenerator", "PurchaseGenerator")
                        .WithMany()
                        .HasForeignKey("Generator")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("DataAccess.DbEntities.Store.StorePurchaseOrder", "StorePurchaseOrder")
                        .WithMany()
                        .HasForeignKey("Order");

                    b.HasOne("DataAccess.DbEntities.Store.PurchaseVehicle", "PurchaseVehicle")
                        .WithMany()
                        .HasForeignKey("Vehicle")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataAccess.DbEntities.Store.MotorSparePart", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.Store.PurchaseGenerator", "PurchaseGenerator")
                        .WithMany()
                        .HasForeignKey("Generator")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("DataAccess.DbEntities.Store.StorePurchaseOrder", "StorePurchaseOrder")
                        .WithMany()
                        .HasForeignKey("Order");

                    b.HasOne("DataAccess.DbEntities.Store.PurchaseVehicle", "PurchaseVehicle")
                        .WithMany()
                        .HasForeignKey("Vehicle")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataAccess.DbEntities.Store.PaymentTypes", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Store.PurchaseGenerator", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("DataAccess.DbEntities.Store.StoreItemPurchase", "ItemPurchase")
                        .WithMany()
                        .HasForeignKey("Purchase")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataAccess.DbEntities.Store.PurchaseUnitType", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Store.PurchaseVehicle", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("DataAccess.DbEntities.Store.StoreItemPurchase", "ItemPurchase")
                        .WithMany()
                        .HasForeignKey("Purchase");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Store.ReceiptType", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Store.StatusAtTimeOfIssue", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Store.StoreItemGroup", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.StoreInventory", "StoreInventory")
                        .WithMany()
                        .HasForeignKey("InventoryId");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Store.StoreItemPurchase", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.CurrencyDetails", "CurrencyDetails")
                        .WithMany()
                        .HasForeignKey("Currency")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.DbEntities.StoreInventoryItem", "StoreInventoryItem")
                        .WithMany("StoreItemPurchases")
                        .HasForeignKey("InventoryItem")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("DataAccess.DbEntities.ProjectDetails", "ProjectDetails")
                        .WithMany()
                        .HasForeignKey("ProjectId");

                    b.HasOne("DataAccess.DbEntities.EmployeeDetail", "EmployeeDetail")
                        .WithMany()
                        .HasForeignKey("PurchasedById")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.DbEntities.Store.ReceiptType", "ReceiptType")
                        .WithMany()
                        .HasForeignKey("ReceiptTypeId");

                    b.HasOne("DataAccess.DbEntities.Store.StatusAtTimeOfIssue", "StatusAtTimeOfIssue")
                        .WithMany()
                        .HasForeignKey("Status");

                    b.HasOne("DataAccess.DbEntities.Store.PurchaseUnitType", "PurchaseUnitType")
                        .WithMany()
                        .HasForeignKey("UnitType")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.DbEntities.VoucherDetail", "VoucherDetail")
                        .WithMany()
                        .HasForeignKey("VoucherId");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Store.StorePurchaseOrder", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.StoreInventoryItem", "StoreInventoryItem")
                        .WithMany()
                        .HasForeignKey("InventoryItem");

                    b.HasOne("DataAccess.DbEntities.EmployeeDetail", "EmployeeDetail")
                        .WithMany()
                        .HasForeignKey("IssuedToEmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("DataAccess.DbEntities.Store.StoreItemPurchase", "StoreItemPurchase")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("Purchase");
                });

            modelBuilder.Entity("DataAccess.DbEntities.Store.VehicleLocation", b =>
                {
                    b.HasOne("DataAccess.DbEntities.Store.PurchaseVehicle", "PurchaseVehicle")
                        .WithMany()
                        .HasForeignKey("Vehicle")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataAccess.DbEntities.Store.VehicleMileage", b =>
                {
                    b.HasOne("DataAccess.DbEntities.Store.PurchaseVehicle", "PurchaseVehicle")
                        .WithMany()
                        .HasForeignKey("Vehicle")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataAccess.DbEntities.StoreInventory", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AccountingNew.ChartOfAccountNew", "ChartCreditAccountDetails")
                        .WithMany()
                        .HasForeignKey("InventoryCreditAccount");

                    b.HasOne("DataAccess.DbEntities.AccountingNew.ChartOfAccountNew", "ChartDebitAccountDetails")
                        .WithMany()
                        .HasForeignKey("InventoryDebitAccount")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.StoreInventoryItem", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.Store.StoreItemGroup", "StoreItemGroup")
                        .WithMany()
                        .HasForeignKey("ItemGroupId");

                    b.HasOne("DataAccess.DbEntities.StoreInventory", "Inventory")
                        .WithMany("InventoryItems")
                        .HasForeignKey("ItemInventory");

                    b.HasOne("DataAccess.DbEntities.Store.InventoryItemType", "ItemTypes")
                        .WithMany()
                        .HasForeignKey("ItemType")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.StoreSourceCodeDetail", b =>
                {
                    b.HasOne("DataAccess.DbEntities.CodeType", "CodeTypes")
                        .WithMany()
                        .HasForeignKey("CodeTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.StrongandWeakPoints", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.TaskMaster", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("DataAccess.DbEntities.ProjectDetails", "ProjectDetailss")
                        .WithMany()
                        .HasForeignKey("ProjectId");
                });

            modelBuilder.Entity("DataAccess.DbEntities.TechnicalQuestion", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.UserDetailOffices", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("DataAccess.DbEntities.VoucherDetail", b =>
                {
                    b.HasOne("DataAccess.DbEntities.Project.ProjectBudgetLineDetail", "ProjectBudgetLineDetail")
                        .WithMany()
                        .HasForeignKey("BudgetLineId");

                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.CurrencyDetails", "CurrencyDetail")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.HasOne("DataAccess.DbEntities.FinancialYearDetail", "FinancialYearDetails")
                        .WithMany()
                        .HasForeignKey("FinancialYearId");

                    b.HasOne("DataAccess.DbEntities.JournalDetail", "JournalDetails")
                        .WithMany("VoucherDetails")
                        .HasForeignKey("JournalCode");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("DataAccess.DbEntities.OfficeDetail", "OfficeDetails")
                        .WithMany()
                        .HasForeignKey("OfficeId");

                    b.HasOne("DataAccess.DbEntities.Project.ProjectDetail", "ProjectDetail")
                        .WithMany()
                        .HasForeignKey("ProjectId");

                    b.HasOne("DataAccess.DbEntities.VoucherType", "VoucherTypes")
                        .WithMany()
                        .HasForeignKey("VoucherTypeId");
                });

            modelBuilder.Entity("DataAccess.DbEntities.VoucherDocumentDetail", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("DataAccess.DbEntities.VoucherDetail", "VoucherDetails")
                        .WithMany()
                        .HasForeignKey("VoucherNo")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataAccess.DbEntities.VoucherTransactions", b =>
                {
                    b.HasOne("DataAccess.DbEntities.Project.ProjectBudgetLineDetail", "ProjectBudgetLineDetail")
                        .WithMany()
                        .HasForeignKey("BudgetLineId");

                    b.HasOne("DataAccess.DbEntities.AccountingNew.ChartOfAccountNew", "ChartOfAccountDetail")
                        .WithMany("VoucherTransactionsList")
                        .HasForeignKey("ChartOfAccountNewId");

                    b.HasOne("DataAccess.DbEntities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DataAccess.DbEntities.CurrencyDetails", "CurrencyDetails")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.HasOne("DataAccess.DbEntities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("DataAccess.DbEntities.OfficeDetail", "OfficeDetails")
                        .WithMany()
                        .HasForeignKey("OfficeId");

                    b.HasOne("DataAccess.DbEntities.Project.ProjectDetail", "ProjectDetail")
                        .WithMany()
                        .HasForeignKey("ProjectId");

                    b.HasOne("DataAccess.DbEntities.VoucherDetail", "VoucherDetails")
                        .WithMany("VoucherTransactionDetails")
                        .HasForeignKey("VoucherNo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.DbEntities.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DataAccess.DbEntities.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
